<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pelican on Coders Digest</title>
    <link>http://abhipandey.com/tags/pelican/</link>
    <description>Recent content in Pelican on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Aug 2015 14:59:18 -0400</lastBuildDate>
    <atom:link href="http://abhipandey.com/tags/pelican/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Convert GitHub Wiki to Static Site with themes</title>
      <link>http://abhipandey.com/2015/08/convert-github-wiki-to-static-site-with-themes/</link>
      <pubDate>Fri, 07 Aug 2015 14:59:18 -0400</pubDate>
      
      <guid>http://abhipandey.com/2015/08/convert-github-wiki-to-static-site-with-themes/</guid>
      <description>

&lt;p&gt;I recently wanted to setup a wiki so that I could convert it into a static html site with a proper themes.
What could be a possible use case for such a requirement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage the documentation of a product internally through &lt;code&gt;git&lt;/code&gt; but publish it for clients/world through static site&lt;/li&gt;
&lt;li&gt;Convert the uncolored wiki to a themed version&lt;/li&gt;
&lt;li&gt;Allow serving of the wiki through web application frameworks like &lt;code&gt;Django&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;It may allow you to have authentication system as a first step hurdle to stop everybody from giving access&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyways, I went about the whole process and decided to jot down everything. Here I am taking &lt;a href=&#34;https://github.com/mbostock/d3/wiki&#34;&gt;D3 Wiki&lt;/a&gt; as an example
which I will be converting into a static site. Let&amp;rsquo;s begin.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/wiki_to_static_1.png&#34; alt=&#34;D3 Wiki using pelican&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        D3 Wiki using pelican
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;setup-and-requirements:7286face6d57cb9f253b611714e09c9a&#34;&gt;Setup and requirements&lt;/h1&gt;

&lt;p&gt;What do we need to get started?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will need a static site generator

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s use &lt;a href=&#34;http://blog.getpelican.com&#34;&gt;&lt;code&gt;pelican&lt;/code&gt;&lt;/a&gt; for this demo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;An actual wiki

&lt;ul&gt;
&lt;li&gt;Since we are going to demo how to convert a wiki to static we will use an
&lt;a href=&#34;https://github.com/showcases/projects-with-great-wikis&#34;&gt;existing wiki from github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s choose &lt;a href=&#34;https://github.com/mbostock/d3/wiki&#34;&gt;D3 Wiki&lt;/a&gt; for this instance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python environment so that &lt;em&gt;pelican&lt;/em&gt; and &lt;em&gt;fabric&lt;/em&gt; can be installed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;virtual-environment-with-pelican:7286face6d57cb9f253b611714e09c9a&#34;&gt;Virtual Environment with pelican&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Setup the virtual environment&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ virtualenv ve_blog
$ source ve_blog/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Install pelican&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install pelican
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pelican Quickstart&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Setup pelican using &lt;code&gt;pelican-quickstart&lt;/code&gt; so that all files are setup correctly for creating a static site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pelican-quickstart

Welcome to pelican-quickstart v3.6.3.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

    
&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? D3 WIKI
&amp;gt; Who will be the author of this web site? abhi1010
&amp;gt; What will be the default language of this web site? [en] 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n) Y
&amp;gt; How many articles per page do you want? [10] 
&amp;gt; What is your time zone? [Europe/Paris] Asia/Singapore
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) Y
&amp;gt; Do you want to upload your website using FTP? (y/N) N
&amp;gt; Do you want to upload your website using SSH? (y/N) N
&amp;gt; Do you want to upload your website using Dropbox? (y/N) N
&amp;gt; Do you want to upload your website using S3? (y/N) N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) N
Done. Your new project is available at /Users/apandey/code/githubs/d3wiki
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-the-wiki:7286face6d57cb9f253b611714e09c9a&#34;&gt;Get the wiki&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/mbostock/d3.wiki.git

Cloning into &#39;d3.wiki&#39;...
remote: Counting objects: 12026, done.
remote: Compressing objects: 100% (67/67), done.
remote: Total 12026 (delta 607), reused 552 (delta 552), pack-reused 11407
Receiving objects: 100% (12026/12026), 9.92 MiB | 1.49 MiB/s, done.
Resolving deltas: 100% (7595/7595), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Setting the wiki as content for pelican&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rmdir content
$ ln -s dr.wiki content
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;why-simple-pelican-won-t-work-and-what-to-do:7286face6d57cb9f253b611714e09c9a&#34;&gt;Why simple pelican won&amp;rsquo;t work and what to do&lt;/h1&gt;

&lt;p&gt;If you tried to simply call &lt;code&gt;pelican&lt;/code&gt; command to build the static site, you will notice a lot of errors like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ fab build

RROR: Skipping ./请求.md: could not find information about &#39;NameError: title&#39;
ERROR: Skipping ./过渡.md: could not find information about &#39;NameError: title&#39;
ERROR: Skipping ./选择器.md: could not find information about &#39;NameError: title&#39;
ERROR: Skipping ./选择集.md: could not find information about &#39;NameError: title&#39;
Done: Processed 0 articles, 0 drafts, 0 pages and 0 hidden pages in 3.47 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that pelican expects some variables to be defined in each &lt;em&gt;markdown&lt;/em&gt; file before it can build the static file.
 Some of the variables are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Slug&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may add your own &lt;a href=&#34;http://docs.getpelican.com/en/3.6.3/content.html#file-metadata&#34;&gt;ones as well&lt;/a&gt; that you want.
 However, for our initial purposes, we will keep it simple and just try to add these.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, how do we achieve this automation?
&lt;strong&gt;&lt;code&gt;fab&lt;/code&gt; is our answer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s write a function in python that will modify the markdown files and update them to add &lt;em&gt;Title, Slug, Date&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will edit &lt;code&gt;fabfile.py&lt;/code&gt; and add a new function &lt;code&gt;create_wiki&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_wiki():
    files = []
    # Find all markdown files in content folder 
    for f in os.walk(&#39;./content/&#39;):
        fpath = lambda x: os.path.join(f[0], x)
        for file in f[2]:
            fullpath = fpath(file)
            # print(&#39;f = {}&#39;.format(fullpath))
            files.append(fullpath)
    filtered = [f for f in files if f.endswith(&#39;.md&#39;)]
    for file in filtered:
        with open(file, &#39;r+&#39;) as f:
            content = f.read()
            f.seek(0, 0)
            base = os.path.basename(file).replace(&#39;.md&#39;, &#39;&#39;) 
            lines = [&#39;Title: {}&#39;.format(base.replace(&#39;-&#39;, &#39; &#39;)),
                    &#39;Slug: {}&#39;.format(base),
                    &#39;Date: 2015-08-07T14:59:18-04:00&#39;,
                    &#39;&#39;, &#39;&#39;]
            line = &#39;\n&#39;.join(lines)
            # Add the lines to the file
            f.write(line + &#39;\n&#39; + content)
        print(file)
    
    # build and serve the website
    build()
    serve()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can call this function easily:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fab create_wiki
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The website can now be viewed at &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-happened-to-the-menu:7286face6d57cb9f253b611714e09c9a&#34;&gt;What happened to the menu?&lt;/h1&gt;

&lt;p&gt;There is a minor issue here though, you will notice that the menu is not available - it is all empty.
It is an easy addition. We will need to add some lines to &lt;code&gt;publishconf.py&lt;/code&gt; to say what the menu is gonna be.&lt;/p&gt;

&lt;p&gt;For my example, I have chosen to show up the following for &lt;em&gt;D3&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API Reference&lt;/li&gt;
&lt;li&gt;Tutorials&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We don&#39;t want all pages to show up in menu
DISPLAY_PAGES_ON_MENU = False

# Choose the specific pages that should be part of menu
MENUITEMS = ( 
    (&#39;HOME&#39;, &#39;/home.html&#39;),
    (&#39;API Reference&#39;, &#39;/API-Reference.html&#39;),
    (&#39;Tutorials&#39;, &#39;/Tutorials.html&#39;),
    (&#39;Plugins&#39;, &#39;/Plugins.html&#39;),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;choosing-themes:7286face6d57cb9f253b611714e09c9a&#34;&gt;Choosing themes&lt;/h1&gt;

&lt;p&gt;By default, pelican uses its own theme for the static site, but theme can be modified.
Let&amp;rsquo;s choose &lt;code&gt;pelican bootstrap3&lt;/code&gt; for our example here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/DandyDev/pelican-bootstrap3.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, add the full path to the theme at the end of the &lt;code&gt;publishconf.py&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;THEME = &amp;quot;/Users/apandey/code/githubs/pelican_coders/all_themes/pelican-bootstrap3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, build your site again and serve:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fab build
fab serve
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/wiki_to_static_2.png&#34; alt=&#34;Pelican Bootstrap3 theme&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Pelican Bootstrap3 theme
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;get-all-this-code-in-github-repo:7286face6d57cb9f253b611714e09c9a&#34;&gt;Get all this code in github repo&lt;/h1&gt;

&lt;p&gt;I realize there maybe a few things going on here. You can get this whole setup as a project from
my &lt;a href=&#34;https://github.com/abhi1010/d3wiki&#34;&gt;github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will find all this code and setup so that your life is easier. Just start with d3 wiki along with virtual environment and you will be fine.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>