<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Coders Digest</title>
    <link>http://abhipandey.com/tags/python/</link>
    <description>Recent content in Python on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Nov 2016 00:33:29 +0800</lastBuildDate>
    
	<atom:link href="http://abhipandey.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Running invoke from other folders</title>
      <link>http://abhipandey.com/2016/11/running-invoke-from-other-folders/</link>
      <pubDate>Sun, 13 Nov 2016 00:33:29 +0800</pubDate>
      
      <guid>http://abhipandey.com/2016/11/running-invoke-from-other-folders/</guid>
      <description>While working on big projects, sometimes, you have invoke tasks lying around in different places. It wouldn&amp;rsquo;t make sense to merge them together but rather help each other out as and when needed.
One such way for this would be to search for invoke tasks from other folders and run them directly when they can be used.
I had to go for this approach for a monolithic repo where multiple projects were being built in mostly similar style with minor modifications.</description>
    </item>
    
    <item>
      <title>Gitlab CLI API reference</title>
      <link>http://abhipandey.com/2016/07/gitlab-cli-api-reference/</link>
      <pubDate>Tue, 05 Jul 2016 23:26:44 +0800</pubDate>
      
      <guid>http://abhipandey.com/2016/07/gitlab-cli-api-reference/</guid>
      <description>Here&amp;rsquo;s a short tutorial on setting up gitlab cli for yourselves. It is extremely user friendly and you can take almost any action that you need. Anything that the UI provides is also available over cli or web services - both of which have examples here.
Let&amp;rsquo;s get started.
gitlab cli Installing the gitlab CLI # http://narkoz.github.io/gitlab/configuration gem install gitlab  Configuration export GITLAB_API_ENDPOINT=&amp;#39;http://gitlab.com/api/v3&amp;#39; export GITLAB_API_PRIVATE_TOKEN=&amp;#39;YOUR_TOKEN_&amp;#39; Available commands $ gitlab +-----------------+ | Help Topics | +-----------------+ | Branches | +-----------------+ | Commits | +-----------------+ | Groups | +-----------------+ | Issues | +-----------------+ | Labels | +-----------------+ | MergeRequests | +-----------------+ | Milestones | +-----------------+ | Namespaces | +-----------------+ | Notes | +-----------------+ | Projects | +-----------------+ | Repositories | +-----------------+ | RepositoryFiles | +-----------------+ | Snippets | +-----------------+ | SystemHooks | +-----------------+ | Users | +-----------------+ Sample CLI commands # Check the list of Projects $ gitlab projects # Based on the response, we know reconwisev2 is ID 487928 # Let&amp;#39;s find out the list of labels in it $ gitlab labels 487928 +---------------------+---------+--------------------+--------------+-------------------+---------------------------+------------+ | Gitlab.</description>
    </item>
    
    <item>
      <title>Protobuf on Docker</title>
      <link>http://abhipandey.com/2016/06/protobuf-on-docker/</link>
      <pubDate>Tue, 28 Jun 2016 23:26:44 +0800</pubDate>
      
      <guid>http://abhipandey.com/2016/06/protobuf-on-docker/</guid>
      <description>Found it really strange that nobody had mentioned on their blog how to compile Protobuf in python with C++ implementation.
I had been having a lot of trouble with the compilation of python protobuf. After struggling with it for a few months on and off I decided to give Docker a try as I realized that my own Fedora OS may be the one having troubles. Thought of starting with Ubuntu Docker as I&amp;rsquo;ve had success with it earlier with such compilation scripts.</description>
    </item>
    
    <item>
      <title>Using TODO in Fedora</title>
      <link>http://abhipandey.com/2016/06/using-todo-in-fedora/</link>
      <pubDate>Wed, 22 Jun 2016 21:17:56 +0800</pubDate>
      
      <guid>http://abhipandey.com/2016/06/using-todo-in-fedora/</guid>
      <description>I recently started using Fedora for work and had to manage a lot of tasks on various projects. The list was big enough and there&amp;rsquo;s no proper support for Evernote in linux, my trusty todo list manager or ToDo list manager by AbstractSpoon. Decided to try post-it notes but my list was changing on an ad-hoc basis. Finally came across an extension Todo.txt.
Turned out this was just what I was looking for.</description>
    </item>
    
    <item>
      <title>Getting list of Issues from JIRA under current sprint</title>
      <link>http://abhipandey.com/2016/05/getting-list-of-issues-from-jira-under-current-sprint/</link>
      <pubDate>Fri, 13 May 2016 21:17:56 +0800</pubDate>
      
      <guid>http://abhipandey.com/2016/05/getting-list-of-issues-from-jira-under-current-sprint/</guid>
      <description>When you are working on Agile Boards in JIRA, you may want to retrieve all the issues related to a particular board or the sprint. Usually you&amp;rsquo;d find issues in progress under the dashboard of the sprint itself.
Python JIRA allows you only a few options:
 incompleted issues completed issues removed issues  As you will also notice from jira docs the sprints function in there only provides you sprints.</description>
    </item>
    
    <item>
      <title>How to setup a local pypi mirror</title>
      <link>http://abhipandey.com/2016/02/how-to-setup-a-local-pypi-mirror/</link>
      <pubDate>Thu, 04 Feb 2016 15:02:07 +0000</pubDate>
      
      <guid>http://abhipandey.com/2016/02/how-to-setup-a-local-pypi-mirror/</guid>
      <description>It is quite easy to set up a local pypi server.
Some details can be found here. You can also use devpi if you prefer but it seems overly complicated for a job that is easily achieved by pip.
Let&amp;rsquo;s look at how to use pip for local installation. Firstly, it is possible to install all requirements beforehand in a separate directory. We can use the following commands:
pip install --download DIR -r requirements.</description>
    </item>
    
    <item>
      <title>Lambda Basics with Python using Github Webhooks or API Gateway</title>
      <link>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</link>
      <pubDate>Wed, 04 Nov 2015 07:49:00 +0000</pubDate>
      
      <guid>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</guid>
      <description>I recently needed to call a command whenever there was a push on my Github repo. Since this was related to AWS tasks, I figured aws lambda is a good candidate. Here I will talk about the steps I took to enable all of this using aws lambda, python. As a side note, I will also elaborate on using API gateway to call upon the lambda itself.
In a nutshell, what I will talk about:</description>
    </item>
    
    <item>
      <title>Elastic Beanstalk Deployment Automation</title>
      <link>http://abhipandey.com/2015/09/elastic-beanstalk-deployment-automation/</link>
      <pubDate>Fri, 04 Sep 2015 00:17:10 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/elastic-beanstalk-deployment-automation/</guid>
      <description>We are going to talk about a setup where all you need to do it commit your code and all the rest of the steps from unit tests to deployment can be taken care of by some externally hosted cloud platform that provides continuous integration. In my case, it is going to be Shippable that I am using as a sample but you can use almost anything like TravisCI or codeship, for example.</description>
    </item>
    
    <item>
      <title>Multiple Virtual Environments in Docker</title>
      <link>http://abhipandey.com/2015/09/multiple-virtual-environments-in-docker/</link>
      <pubDate>Thu, 03 Sep 2015 22:33:33 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/multiple-virtual-environments-in-docker/</guid>
      <description>It may seem like a daunting task to have multiple python projects running in their own virtual environments in docker as you want to manage the running of the tasks from a single source - let&amp;rsquo;s say supervisord. However, all that is required here is to know that python automatically picks up the location of the virtual environments if you provide full path to the virtual environment&amp;rsquo;s python.
For example, in my docker environment, I have virtual environment install at the following location:</description>
    </item>
    
  </channel>
</rss>