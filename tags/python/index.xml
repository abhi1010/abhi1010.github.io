<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Coders Digest</title>
    <link>http://abhipandey.com/tags/python/</link>
    <description>Recent content in Python on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Feb 2016 15:02:07 +0000</lastBuildDate>
    <atom:link href="http://abhipandey.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to setup a local pypi mirror</title>
      <link>http://abhipandey.com/2016/02/how-to-setup-a-local-pypi-mirror/</link>
      <pubDate>Thu, 04 Feb 2016 15:02:07 +0000</pubDate>
      
      <guid>http://abhipandey.com/2016/02/how-to-setup-a-local-pypi-mirror/</guid>
      <description>&lt;p&gt;It is quite easy to set up a local pypi server.&lt;/p&gt;

&lt;p&gt;Some details can be found &lt;a href=&#34;https://pip.pypa.io/en/latest/user_guide/#installing-from-local-packages&#34;&gt;here&lt;/a&gt;.
You can also use &lt;a href=&#34;http://doc.devpi.net/latest/quickstart-pypimirror.html&#34;&gt;devpi&lt;/a&gt; if you prefer but it
seems overly complicated for a job that is easily achieved by pip.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at how to use &lt;code&gt;pip&lt;/code&gt; for local installation.
Firstly, it is possible to install all requirements beforehand in a separate directory.
 We can use the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --download DIR -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer wheel, then use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip wheel --wheel-dir DIR -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we want to install from this given directory &lt;code&gt;DIR&lt;/code&gt;, then
the following command can help:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --no-index --find-links=DIR -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using these in a current setup and you feel it still slows you down then the reason would be
one of the first few commands where the request is still going to the internet.
If you want to speed up the whole process then perhaps you need to send out a request to the internet
only if a new package is available in the requirements.txt file otherwise you can skip that part altogether,
just leading onto &lt;code&gt;pip install --no-index&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will make your installation a flash.&lt;/p&gt;

&lt;p&gt;One quick and dirty way to maintain a local copy of requirements.txt file and figure out on every commit of code change
in the project, whether a new requirement has been added to that list. In that case, install it + update your local copy.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a sample code to put all changes in a single line that you can feed into &lt;code&gt;pip install&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sdiff -s /tmp/1 /tmp/2 | sed -e &#39;s/&amp;lt;//g&#39; | awk &#39;BEGIN {ORS=&amp;quot; &amp;quot;} {print $1}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Breaking it down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sdiff&lt;/code&gt; checks if there are any new changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed&lt;/code&gt; ensures that you only get the relevant characters, not &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;If you want you can put an &lt;code&gt;egrep&lt;/code&gt; before &lt;code&gt;sed&lt;/code&gt; to get only one side of the changes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awk&lt;/code&gt; puts all the lines together into a space separated values that can be fed into &lt;code&gt;pip install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lambda Basics with Python using Github Webhooks or API Gateway</title>
      <link>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</link>
      <pubDate>Wed, 04 Nov 2015 07:49:00 +0000</pubDate>
      
      <guid>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</guid>
      <description>

&lt;p&gt;I recently needed to call a command whenever there was a push on my Github repo.
Since this was related to AWS tasks, I figured &lt;code&gt;aws lambda&lt;/code&gt; is a good candidate.
Here I will talk about the steps I took to enable all of this using aws lambda, python.
As a side note, I will also elaborate on using API gateway to call upon the lambda itself.&lt;/p&gt;

&lt;p&gt;In a nutshell, what I will talk about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;SNS&lt;/strong&gt; Topic&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;IAM user&lt;/strong&gt; who can Publish&lt;/li&gt;
&lt;li&gt;Setup &lt;strong&gt;GitHub webhook&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;Lambda function&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Setup &lt;strong&gt;API Gateway&lt;/strong&gt; url that can call lambda function&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-sns-topic:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create SNS Topic&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://ap-northeast-1.console.aws.amazon.com/sns/v2/home?region=ap-northeast-1#/home&#34;&gt;AWS Console&lt;/a&gt; and click on Create Topic.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_sns_1.png&#34; alt=&#34;Creating an API&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating an API
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Note down the &lt;code&gt;ARN&lt;/code&gt; because you will need that.
In my case it is something like &lt;code&gt;arn:aws:sns:ap-northeast-1:XXXXXXXXXXXX:commits_1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;create-iam-user:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create IAM user&lt;/h1&gt;

&lt;p&gt;We need to setup an IAM user who can publish onto this SNS we just created.
As a shortcut you can just create a simple user and initialize it with full access rights for testing purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once on IAM page click on &amp;ldquo;Create New Users&amp;rdquo; button at the top.&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_1.png&#34; alt=&#34;Creating new IAM user&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating new IAM user
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It will then allow you to download credentials if you want&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_2.png&#34; alt=&#34;Creating new IAM user&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating new IAM user
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;add-permissions:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Add permissions&lt;/h2&gt;

&lt;p&gt;Once an IAM user is created, by default there are no permissions attached to the account.
&lt;strong&gt;You can add permissions by going to permissions tab and clicking on &amp;ldquo;Attach Policy&amp;rdquo; button&lt;/strong&gt;.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_3.png&#34; alt=&#34;Attach Policy&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Attach Policy
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;setup-github-webhook:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Setup GitHub webhook&lt;/h1&gt;

&lt;p&gt;We need to assign a webhook for each Git commit. So let&amp;rsquo;s do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to your GitHub repo&lt;/li&gt;
&lt;li&gt;Click on “Settings” in the sidebar of that repo

&lt;ul&gt;
&lt;li&gt;It has to be an actual repo settings, not profile settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click on “Webhooks &amp;amp; Services”&lt;/li&gt;
&lt;li&gt;Click the “Add service” dropdown, then click “AmazonSNS”

&lt;ul&gt;
&lt;li&gt;You will need the account details for the IAM user you just created&lt;/li&gt;
&lt;li&gt;The trigger will be delegated through this given IAM user&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Add SNS Webhook&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_webhooks_1.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add Account details from IAM user&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_webhooks_2.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;create-lambda-function:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Lambda function&lt;/h1&gt;

&lt;p&gt;Now that we have creater a user, assigned a trigger on Github, we need to create a function
that will be run on an actual trigger.
Let&amp;rsquo;s create a lambda function by going to &lt;a href=&#34;https://ap-northeast-1.console.aws.amazon.com/lambda/home?region=ap-northeast-1#/functions&#34;&gt;AWS Lambda&lt;/a&gt; and
clicking on &amp;ldquo;Create a Lambda Function&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Filter by SNS in the given samples because we want to see SNS functions.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_lambda_1.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;em&gt;Ensure that you select your SNS as the event source.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a Lambda function with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
print(&#39;Loading function&#39;)

def lambda_handler(event, context):
    print(&amp;quot;Received event: &amp;quot; + json.dumps(event, indent=2))
    message = event[&#39;Records&#39;][0][&#39;Sns&#39;][&#39;Message&#39;]
    print(&amp;quot;From SNS: &amp;quot; + message)
    return message
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_lambda_2.png&#34; alt=&#34;Python code&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Python code
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;testing-the-setup-so-far:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Testing the setup so far&lt;/h1&gt;

&lt;h2 id=&#34;testing-github-webhook:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Testing GitHub webhook&lt;/h2&gt;

&lt;p&gt;Now that we have setup &lt;strong&gt;Lambda, SNS, and Github&lt;/strong&gt; so far, it is time to test the setup.&lt;/p&gt;

&lt;p&gt;Go to the &amp;ldquo;Webhooks and Services&amp;rdquo; under you repo settings and click on &amp;ldquo;Amazon SNS&amp;rdquo; that is
viewable at the bottom of that page. You will then be able to test the service.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_1.png&#34; /&gt;
    
    
&lt;/figure&gt;

There&amp;rsquo;s a button at the top right &amp;ldquo;Test service&amp;rdquo;. Once you click it, GitHub will confirm that the message is indeed sent.&lt;/p&gt;

&lt;h2 id=&#34;checking-aws:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Checking AWS&lt;/h2&gt;

&lt;p&gt;Now that we have been able to send the message, we also need to confirm that the lambda was actually called.&lt;/p&gt;

&lt;p&gt;This can be done by looking at CloudWatch logs. Any lambda run will be logged under CloudWatch.
Even normal logging is also available there.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_2.png&#34; alt=&#34;Going to CloudWatch&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Going to CloudWatch
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_3.png&#34; alt=&#34;Checking the lambda logs&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Checking the lambda logs
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;setup-api-gateway:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Setup API Gateway&lt;/h1&gt;

&lt;p&gt;After all this is done, we can even &lt;strong&gt;create an API along with a public facing URL&lt;/strong&gt;
where all these services can be called (apart from just GitHub), if you&amp;rsquo;d like.
So let&amp;rsquo;s do that.&lt;/p&gt;

&lt;h2 id=&#34;create-api:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create API&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_1.png&#34; alt=&#34;Creating an API&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating an API
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-resource:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Resource&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_2.png&#34; alt=&#34;Creating Resource&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating Resource
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-method:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Method&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_3.png&#34; alt=&#34;Creating Method for GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating Method for GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_4.png&#34; alt=&#34;Assign Lambda function to GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Assign Lambda function to GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;test-your-get-method:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Test your GET Method&lt;/h2&gt;

&lt;p&gt;Now this API can be tested easily by just calling upon this URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://XXXXXXXXXXXX.execute-api.ap-northeast-1.amazonaws.com/test/resource_1/&#34;&gt;https://XXXXXXXXXXXX.execute-api.ap-northeast-1.amazonaws.com/test/resource_1/&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_5.png&#34; alt=&#34;Check your Response from Lambda using GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Check your Response from Lambda using GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;If you wanted to test from a URL, it would be actually going to this URL itself from the browser.&lt;/p&gt;

&lt;h1 id=&#34;misc:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Misc&lt;/h1&gt;

&lt;h2 id=&#34;using-cli:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Using CLI&lt;/h2&gt;

&lt;p&gt;Try the following command to get the list of your lambda functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws lambda --profile lambda.s3.1 --region ap-northeast-1 list-functions
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Functions&amp;quot;: [
        {
            &amp;quot;CodeSize&amp;quot;: 317,
            &amp;quot;FunctionArn&amp;quot;: &amp;quot;arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:lambda_1&amp;quot;,
            &amp;quot;MemorySize&amp;quot;: 128,
            &amp;quot;Role&amp;quot;: &amp;quot;arn:aws:iam::XXXXXXXXXXXX:role/lambda_basic_execution_1&amp;quot;,
            &amp;quot;Handler&amp;quot;: &amp;quot;lambda_function.lambda_handler&amp;quot;,
            &amp;quot;Runtime&amp;quot;: &amp;quot;python2.7&amp;quot;,
            &amp;quot;CodeSha256&amp;quot;: &amp;quot;.....&amp;quot;,
            &amp;quot;FunctionName&amp;quot;: &amp;quot;lambda_1&amp;quot;,
            &amp;quot;Timeout&amp;quot;: 183,
            &amp;quot;LastModified&amp;quot;: &amp;quot;2015-11-15T07:49:28.367+0000&amp;quot;,
            &amp;quot;Version&amp;quot;: &amp;quot;$LATEST&amp;quot;,
            &amp;quot;Description&amp;quot;: &amp;quot;An Amazon SNS trigger that logs the message pushed to the SNS topic.&amp;quot;
        },
        {
            &amp;quot;CodeSize&amp;quot;: 316,
            &amp;quot;FunctionArn&amp;quot;: &amp;quot;arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:lambda_2&amp;quot;,
            &amp;quot;MemorySize&amp;quot;: 128,
            &amp;quot;Role&amp;quot;: &amp;quot;arn:aws:iam::XXXXXXXXXXXX:role/lambda_basic_execution_1&amp;quot;,
            &amp;quot;Handler&amp;quot;: &amp;quot;lambda_function.lambda_handler&amp;quot;,
            &amp;quot;Runtime&amp;quot;: &amp;quot;python2.7&amp;quot;,
            &amp;quot;CodeSha256&amp;quot;: &amp;quot;.......&amp;quot;,
            &amp;quot;FunctionName&amp;quot;: &amp;quot;lambda_2&amp;quot;,
            &amp;quot;Timeout&amp;quot;: 3,
            &amp;quot;LastModified&amp;quot;: &amp;quot;2015-11-14T14:03:00.083+0000&amp;quot;,
            &amp;quot;Version&amp;quot;: &amp;quot;$LATEST&amp;quot;,
            &amp;quot;Description&amp;quot;: &amp;quot;An Amazon SNS trigger that logs the message pushed to the SNS topic.&amp;quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-policy-for-lambda-access:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Custom Policy for Lambda Access&lt;/h2&gt;

&lt;p&gt;Validate Policy
You can either just give &amp;ldquo;AmazonSNSFullAccess&amp;rdquo; to the user &lt;em&gt;lambda.s3.1&lt;/em&gt; or add the following Policy
onto &lt;strong&gt;User-&amp;gt;Permission-&amp;gt;Add Inline policy-&amp;gt;custom policy-&amp;gt;Select-&amp;gt;Policy Document&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Action&amp;quot;: [
        &amp;quot;sns:Publish&amp;quot;
      ],
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:sns:ap-northeast-1:YOUR_NUMBER:Commits_1&amp;quot;
      ],
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Elastic Beanstalk Deployment Automation</title>
      <link>http://abhipandey.com/2015/09/elastic-beanstalk-deployment-automation/</link>
      <pubDate>Fri, 04 Sep 2015 00:17:10 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/elastic-beanstalk-deployment-automation/</guid>
      <description>

&lt;p&gt;We are going to talk about a setup where &lt;strong&gt;all you need to do it &lt;em&gt;commit&lt;/em&gt; your code and all the rest of the steps from unit tests to deployment can be taken care of by some externally hosted cloud platform that provides continuous integration.&lt;/strong&gt;
  In my case, it is going to be &lt;code&gt;Shippable&lt;/code&gt; that I am using as a sample but you can use almost anything like &lt;code&gt;TravisCI&lt;/code&gt; or &lt;code&gt;codeship&lt;/code&gt;, for example.&lt;/p&gt;

&lt;h1 id=&#34;setup:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;Here is the setup we will be looking at:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/elastic-beanstalk-deployment-automation-arch.png&#34; alt=&#34;Architecture&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Architecture
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;shippable-for-commits:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Shippable for commits&lt;/h1&gt;

&lt;p&gt;We will use &lt;code&gt;shippable&lt;/code&gt; for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unit Tests&lt;/li&gt;
&lt;li&gt;Regression Tests&lt;/li&gt;
&lt;li&gt;Localized DB Tests&lt;/li&gt;
&lt;li&gt;Tagging of the source code if the commit passes all tests&lt;/li&gt;
&lt;li&gt;Deployment of the source code on &lt;code&gt;beanstalk&lt;/code&gt; running &lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Login onto &lt;code&gt;shippable&lt;/code&gt; and setup your project to be built. It uses webhooks with your repository like &lt;code&gt;GitHub&lt;/code&gt; or &lt;code&gt;shippable&lt;/code&gt; which are called on every commit.
You can create a &lt;code&gt;shippable.yml&lt;/code&gt; file in your project which will be called on every commit. If you have used &lt;code&gt;docker&lt;/code&gt; before, it might look familiar because they invoke a &lt;code&gt;docker&lt;/code&gt; script to run the script within &lt;code&gt;shippable.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is one of my sample files from the project that powers this blog:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;language: python

install:
  - pip install Pygments 

before_script:
  - git config --global push.default matching
  - mkdir -p themes
  - git clone git@github.com:abhi1010/abhi1010.github.io.git
  - &lt;span style=&#34;color: #204a87&#34;&gt;cd&lt;/span&gt; themes
  - git clone https://github.com/abhi1010/hyde-a.git
  - &lt;span style=&#34;color: #204a87&#34;&gt;cd&lt;/span&gt; ../

script:
  - hugo -d abhi1010.github.io/

after_success:
  - &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;`&lt;/span&gt;
  - &lt;span style=&#34;color: #204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;NOW_HOUR&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;$(&lt;/span&gt;date +%d-%b-%H_%M&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;)&lt;/span&gt; 
  - git config --global user.email &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;abhi.pandey@gmail.com&amp;quot;&lt;/span&gt;
  - git config --global user.name &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;abhi1010&amp;quot;&lt;/span&gt;
  - git config --get remote.origin.url
  - git remote set-url origin git@github.com:abhi1010.github.io.git
  - &lt;span style=&#34;color: #204a87&#34;&gt;cd&lt;/span&gt; abhi1010.github.io
  - git status -s
  - &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;a\n*\nq\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;git add -i
  - git commit -am &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;Automated build from Shippable - &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;$NOW_HOUR&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push


notifications:
     email:
         recipients:
             - abhi@boun.cr
         on_success: change
         on_failure: always

cache: &lt;span style=&#34;color: #204a87&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script does the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;python&lt;/code&gt; as the default language for the scripts to use&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;Pygments&lt;/code&gt; using &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;My blog is done using three repos - so it does a &lt;em&gt;git clone&lt;/em&gt; for each&lt;/li&gt;
&lt;li&gt;Calls on hugo to create the static site&lt;/li&gt;
&lt;li&gt;Commits the changes made in static content to &lt;code&gt;GitHub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once it works, you will see the following on &lt;code&gt;shippable&lt;/code&gt; site:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/elastic-beanstalk-deployment-automation-2.png&#34; alt=&#34;Shippable Build Status&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Shippable Build Status
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;unit-tests:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Unit Tests&lt;/h2&gt;

&lt;p&gt;You may also want to set up unit tests and regression tests as part of your &lt;em&gt;scripts&lt;/em&gt;
Just do the following then&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&lt;/span&gt;  &lt;span style=&#34;color: #000000&#34;&gt;py.test-3.4 tests/test.py --maxfail=3 -s --full-trace --tb=long --junitxml=../shippable/testresults/pytests.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;git-tagging:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Git Tagging&lt;/h2&gt;

&lt;p&gt;If the tests pass in &lt;em&gt;scripts&lt;/em&gt; only then does &lt;code&gt;shippable&lt;/code&gt; go to &lt;strong&gt;after_success&lt;/strong&gt; section.
Over there, you might want to tag your source code, so that &lt;code&gt;docker&lt;/code&gt; will only pull the tagged and approved commits from &lt;code&gt;shippable&lt;/code&gt;, not every commit - which is very important.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how to do that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;after_success:
  - git tag -f recon_prod master
  - git push -f --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;deployment:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Deployment&lt;/h1&gt;

&lt;p&gt;Once you have approved your code commit, it is time to deploy it to &lt;code&gt;docker&lt;/code&gt; on &lt;code&gt;beanstalk&lt;/code&gt;.
I like to keep deployment scripts in another bash script, so that deployment can be done in various other ways as well, if needed.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;after_success:
  - main/scripts/deploy.sh 
  - &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;CODE DEPLOYED&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, you may choose to have the &amp;ldquo;deployment&amp;rdquo; script from another project, if you wish. It allows you to separately maintain all the moving parts.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;rm -rf &lt;span style=&#34;color: #204a87&#34;&gt;cd&lt;/span&gt; eb-reconwise
&lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;Deploying New Dockers&amp;#39;&lt;/span&gt;
git clone https://github.com/abhi1010/deplyment_project.git
&lt;span style=&#34;color: #204a87&#34;&gt;cd&lt;/span&gt; deplyment_project/
chmod +x deploy.sh
eb use beanstalk_env_name
./deploy.sh
&lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;Deployment Complete&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;dockerfile:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;Now first what we need is setting up &lt;code&gt;docker&lt;/code&gt; on beanstalk.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  FROM abhi1010/base_docker
  MAINTAINER abhi1010 &amp;lt;codersdigest@gmail.com&amp;gt;
  
  ENV DEBIAN_FRONTEND noninteractive
  
  ENV WS &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;/ws&amp;#39;&lt;/span&gt;
  ENV CURR_HOME &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;/root&amp;#39;&lt;/span&gt;
  WORKDIR &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;
  
  RUN git clone https://github.com/abhi1010/dockerprj.git &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/ve_envs/rwv2/bin/activate &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/prj/rw/manage.py collectstatic --noinput
  
  COPY supervisor-app.conf &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/
  
  RUN &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
      cp &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/supervisor-app.conf /etc/supervisor/supervisord.conf &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chown -R www-data:www-data /var/lib/nginx

  VOLUME &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/shared/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/etc/nginx/sites-enabled&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/log/nginx&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/ws/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
    
  EXPOSE 80
  CMD &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;supervisord&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;-n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This does the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run a base &lt;code&gt;docker&lt;/code&gt; from a custom image - where all apps and project requirements have already been installed and configured. It helps me save a lot of time during deployments.&lt;/li&gt;
&lt;li&gt;Download the source code using &lt;code&gt;RUN&lt;/code&gt; - which I update using another method.

&lt;ul&gt;
&lt;li&gt;You can view detail on this &lt;a href=&#34;http://abhipandey.com/2015/09/updating-django-source-with-docker-deployments/&#34;&gt;method here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;supervisord&lt;/code&gt; config as well&lt;/li&gt;
&lt;li&gt;Set the right user rights for &lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setup folders to be shared using &lt;code&gt;VOLUME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Expose port 80 so that this &lt;code&gt;docker&lt;/code&gt; container can be used as a web container&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;cmd&lt;/code&gt; so that it allows &lt;code&gt;supervisord&lt;/code&gt; to be used for running the container&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;beanstalk-configuration:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Beanstalk Configuration&lt;/h2&gt;

&lt;p&gt;Once we have the &lt;code&gt;Dockerfile&lt;/code&gt; ready, we need to set up the configuration for &lt;code&gt;beanstalk&lt;/code&gt; so that during deployment, other steps can be taken care of as well. Some of the things to keep in mind in &lt;code&gt;beanstalk&lt;/code&gt; setup are:&lt;/p&gt;

&lt;h3 id=&#34;tips:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Tips&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All &lt;code&gt;beanstalk&lt;/code&gt; configuration has be kept in a folder called &lt;strong&gt;&lt;code&gt;.ebextension&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beanstalk ec2&lt;/code&gt; instance maintains a folder internally to run the scripts while setting up &lt;code&gt;docker&lt;/code&gt; for you so that the instance can be ready for you

&lt;ul&gt;
&lt;li&gt;It is totally possible to &lt;em&gt;plug&lt;/em&gt; your own scripts into &lt;code&gt;beanstalk&lt;/code&gt; initialization setup so that you can &lt;em&gt;program&lt;/em&gt; a custom &lt;code&gt;EC2&lt;/code&gt; instance for yourself&lt;/li&gt;
&lt;li&gt;Folder to place your scripts are &lt;code&gt;/opt/elasticbeanstalk/hooks/appdeploy/post&lt;/code&gt; and &lt;code&gt;/opt/elasticbeanstalk/hooks/appdeploy/pre&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scripts placed in the folders are read in alphabetical order&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can increase the timeout of your &lt;code&gt;docker&lt;/code&gt; initialization setup if it takes too long due to multiple steps
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;option_settings&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;aws&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;elasticbeanstalk&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;command&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;option_name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Timeout&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1800&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;user-accounts:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;User Accounts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can also add any user account if you&amp;rsquo;d like pragmatically and make sure they are &lt;em&gt;always&lt;/em&gt; part of the &lt;code&gt;EC2&lt;/code&gt; instance that you are creating

&lt;ul&gt;
&lt;li&gt;Create a file called &lt;code&gt;00001.ftp.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pre&lt;/code&gt; folder to setup accounts
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;files:
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/opt/elasticbeanstalk/hooks/appdeploy/pre/0001_create_users.sh&amp;quot;&lt;/span&gt;:
    mode: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;000755&amp;quot;&lt;/span&gt; 
    owner: root
    group: root
    content: &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;
      &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;About to Add user gh-user&amp;#39;&lt;/span&gt;
      adduser gh-user
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;mkdir ~/.ssh&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;chmod 700 ~/.ssh&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;touch ~/.ssh/authorized_keys&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;chmod 600 ~/.ssh/authorized_keys&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;echo &amp;quot;ssh-rsa r4CBI2cWQohEwBkGw9CcW0vWfnlAcKkrCnsJvwe/+kG5w9J8gJdnNQ8BFB+q+kQ6fWl+1kw7b+8jah5q0nNpOzLbed+Rzse1BoOIjsSXqN/L7AW8y61PVBULcVAVBKCrVy0U5zifv/e6a5+dsUD3WLiD3yXTgPDcZoqQqPYkurCx5ZzxLylKfXfL37k7sz00e+Tu/Y+J9xXdI9j3G5bU9rmIe4SH4mK4BCMRQ6zCHqAzAXZtnmN5U1XR3XrfMtuDLvVgcOlEpXIMl9q2kco0ZCdMkYoSzf3Yj&amp;quot; &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;pre-installing-packages:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Pre-installing Packages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You should also install any package that you&amp;rsquo;d like on all &lt;code&gt;EC2&lt;/code&gt; instances&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;files:
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/opt/elasticbeanstalk/hooks/appdeploy/pre/0003_packages.sh&amp;quot;&lt;/span&gt;:
    mode: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;000755&amp;quot;&lt;/span&gt; 
    owner: root
    group: root
    content: &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#!/usr/bin/env bash &lt;/span&gt;
      yum install -y git
     
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;sharing-volumes-between-docker-and-ec2:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Sharing volumes between &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;EC2&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that folder sharing is enabled between &lt;code&gt;EC2&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt; instances

&lt;ul&gt;
&lt;li&gt;This goes into file &lt;code&gt;Dockerrun.aws.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;AWSEBDockerrunVersion&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Volumes&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;HostDirectory&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/shared&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;ContainerDirectory&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/shared&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;,
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Ports&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;ContainerPort&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;80&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;,
   &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Logging&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/log/&amp;quot;&lt;/span&gt;
 &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;folder-and-files-structure:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Folder and files structure&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Finally, make sure that your folder files are setup as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt; tree -a 
.
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- .ebextensions
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- 0000_users.config  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# setup extra users&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- 0002_packages.config  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# install external packages&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- 0004_bash.config  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# I like to manage all &lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- .elasticbeanstalk
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- config.yml  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# AWS connection details&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- .gitignore 
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- Dockerfile  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# Docker instance&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- Dockerrun.aws.json   &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# folder sharing&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- updater.sh  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# script to update any code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;elasticbeanstalk-folder-for-aws-configs:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;&lt;code&gt;.elasticbeanstalk&lt;/code&gt; folder for &lt;code&gt;aws&lt;/code&gt; configs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You might be wondering what&amp;rsquo;s &lt;code&gt;.elasticbeanstalk&lt;/code&gt; folder. It is the folder that&amp;rsquo;s responsible for taking your &lt;code&gt;AWS&lt;/code&gt; secret key and access id for doing the actual deployment. If you don&amp;rsquo;t set it up, AWS will ask you every time.

&lt;ul&gt;
&lt;li&gt;For setting it up, you just need to call &lt;code&gt;eb config&lt;/code&gt; one time, it creates the folder for you with all the details, including connection details. You can then make it part of your &lt;code&gt;git&lt;/code&gt; commits&lt;/li&gt;
&lt;li&gt;Make sure it is secure&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that&amp;rsquo;s it! Once you commit your code, &lt;code&gt;shippable&lt;/code&gt; will run the tests, tag your code and finally download this &lt;em&gt;deployment&lt;/em&gt; project and deploy it to &lt;code&gt;beanstalk&lt;/code&gt; through &lt;code&gt;docker&lt;/code&gt; containers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple Virtual Environments in Docker</title>
      <link>http://abhipandey.com/2015/09/multiple-virtual-environments-in-docker/</link>
      <pubDate>Thu, 03 Sep 2015 22:33:33 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/multiple-virtual-environments-in-docker/</guid>
      <description>&lt;p&gt;It may seem like a daunting task to have multiple python projects running in their own virtual environments in docker as you want to manage the running of the tasks from a single source - let&amp;rsquo;s say &lt;code&gt;supervisord&lt;/code&gt;.
However, all that is required here is to know that python automatically picks up the location of the virtual environments if you provide full path to the virtual environment&amp;rsquo;s python.&lt;/p&gt;

&lt;p&gt;For example, in my docker environment, I have virtual environment install at the following location:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ws/ve_envs/rwv1/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable a project with this virtual environment, I can run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ws/ve_envs/rwv1/bin/python3.4 PYTHON_PROJECT_FILE_TO_RUN.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, other projects can be set up in the same way.&lt;/p&gt;

&lt;p&gt;For example, for running &lt;code&gt;uwsgi&lt;/code&gt; I provide the full path for python as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;program:appName&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;stdout_logfile&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /var/shared/_uwsgi.log
&lt;span style=&#34;color: #204a87&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/ve_envs/project/bin/uwsgi --touch-reload&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;/ws/wsgi.ini --ini /ws/wsgi.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might want to read about &lt;code&gt;--touch-reload&lt;/code&gt; in my &lt;a href=&#34;http://abhipandey.com/2015/09/updating-django-source-with-docker-deployments/&#34;&gt;other post.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>