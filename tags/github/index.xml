<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Coders Digest</title>
    <link>http://abhipandey.com/tags/github/</link>
    <description>Recent content in Github on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Nov 2015 07:49:00 +0000</lastBuildDate>
    <atom:link href="http://abhipandey.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lambda Basics with Python using Github Webhooks or API Gateway</title>
      <link>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</link>
      <pubDate>Wed, 04 Nov 2015 07:49:00 +0000</pubDate>
      
      <guid>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</guid>
      <description>

&lt;p&gt;I recently needed to call a command whenever there was a push on my Github repo.
Since this was related to AWS tasks, I figured &lt;code&gt;aws lambda&lt;/code&gt; is a good candidate.
Here I will talk about the steps I took to enable all of this using aws lambda, python.
As a side note, I will also elaborate on using API gateway to call upon the lambda itself.&lt;/p&gt;

&lt;p&gt;In a nutshell, what I will talk about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;SNS&lt;/strong&gt; Topic&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;IAM user&lt;/strong&gt; who can Publish&lt;/li&gt;
&lt;li&gt;Setup &lt;strong&gt;GitHub webhook&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;Lambda function&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Setup &lt;strong&gt;API Gateway&lt;/strong&gt; url that can call lambda function&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-sns-topic:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create SNS Topic&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://ap-northeast-1.console.aws.amazon.com/sns/v2/home?region=ap-northeast-1#/home&#34;&gt;AWS Console&lt;/a&gt; and click on Create Topic.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_sns_1.png&#34; alt=&#34;Creating an API&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating an API
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Note down the &lt;code&gt;ARN&lt;/code&gt; because you will need that.
In my case it is something like &lt;code&gt;arn:aws:sns:ap-northeast-1:XXXXXXXXXXXX:commits_1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;create-iam-user:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create IAM user&lt;/h1&gt;

&lt;p&gt;We need to setup an IAM user who can publish onto this SNS we just created.
As a shortcut you can just create a simple user and initialize it with full access rights for testing purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once on IAM page click on &amp;ldquo;Create New Users&amp;rdquo; button at the top.&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_1.png&#34; alt=&#34;Creating new IAM user&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating new IAM user
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It will then allow you to download credentials if you want&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_2.png&#34; alt=&#34;Creating new IAM user&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating new IAM user
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;add-permissions:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Add permissions&lt;/h2&gt;

&lt;p&gt;Once an IAM user is created, by default there are no permissions attached to the account.
&lt;strong&gt;You can add permissions by going to permissions tab and clicking on &amp;ldquo;Attach Policy&amp;rdquo; button&lt;/strong&gt;.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_3.png&#34; alt=&#34;Attach Policy&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Attach Policy
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;setup-github-webhook:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Setup GitHub webhook&lt;/h1&gt;

&lt;p&gt;We need to assign a webhook for each Git commit. So let&amp;rsquo;s do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to your GitHub repo&lt;/li&gt;
&lt;li&gt;Click on “Settings” in the sidebar of that repo

&lt;ul&gt;
&lt;li&gt;It has to be an actual repo settings, not profile settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click on “Webhooks &amp;amp; Services”&lt;/li&gt;
&lt;li&gt;Click the “Add service” dropdown, then click “AmazonSNS”

&lt;ul&gt;
&lt;li&gt;You will need the account details for the IAM user you just created&lt;/li&gt;
&lt;li&gt;The trigger will be delegated through this given IAM user&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Add SNS Webhook&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_webhooks_1.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add Account details from IAM user&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_webhooks_2.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;create-lambda-function:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Lambda function&lt;/h1&gt;

&lt;p&gt;Now that we have creater a user, assigned a trigger on Github, we need to create a function
that will be run on an actual trigger.
Let&amp;rsquo;s create a lambda function by going to &lt;a href=&#34;https://ap-northeast-1.console.aws.amazon.com/lambda/home?region=ap-northeast-1#/functions&#34;&gt;AWS Lambda&lt;/a&gt; and
clicking on &amp;ldquo;Create a Lambda Function&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Filter by SNS in the given samples because we want to see SNS functions.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_lambda_1.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;em&gt;Ensure that you select your SNS as the event source.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a Lambda function with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
print(&#39;Loading function&#39;)

def lambda_handler(event, context):
    print(&amp;quot;Received event: &amp;quot; + json.dumps(event, indent=2))
    message = event[&#39;Records&#39;][0][&#39;Sns&#39;][&#39;Message&#39;]
    print(&amp;quot;From SNS: &amp;quot; + message)
    return message
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_lambda_2.png&#34; alt=&#34;Python code&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Python code
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;testing-the-setup-so-far:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Testing the setup so far&lt;/h1&gt;

&lt;h2 id=&#34;testing-github-webhook:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Testing GitHub webhook&lt;/h2&gt;

&lt;p&gt;Now that we have setup &lt;strong&gt;Lambda, SNS, and Github&lt;/strong&gt; so far, it is time to test the setup.&lt;/p&gt;

&lt;p&gt;Go to the &amp;ldquo;Webhooks and Services&amp;rdquo; under you repo settings and click on &amp;ldquo;Amazon SNS&amp;rdquo; that is
viewable at the bottom of that page. You will then be able to test the service.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_1.png&#34; /&gt;
    
    
&lt;/figure&gt;

There&amp;rsquo;s a button at the top right &amp;ldquo;Test service&amp;rdquo;. Once you click it, GitHub will confirm that the message is indeed sent.&lt;/p&gt;

&lt;h2 id=&#34;checking-aws:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Checking AWS&lt;/h2&gt;

&lt;p&gt;Now that we have been able to send the message, we also need to confirm that the lambda was actually called.&lt;/p&gt;

&lt;p&gt;This can be done by looking at CloudWatch logs. Any lambda run will be logged under CloudWatch.
Even normal logging is also available there.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_2.png&#34; alt=&#34;Going to CloudWatch&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Going to CloudWatch
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_3.png&#34; alt=&#34;Checking the lambda logs&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Checking the lambda logs
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;setup-api-gateway:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Setup API Gateway&lt;/h1&gt;

&lt;p&gt;After all this is done, we can even &lt;strong&gt;create an API along with a public facing URL&lt;/strong&gt;
where all these services can be called (apart from just GitHub), if you&amp;rsquo;d like.
So let&amp;rsquo;s do that.&lt;/p&gt;

&lt;h2 id=&#34;create-api:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create API&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_1.png&#34; alt=&#34;Creating an API&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating an API
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-resource:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Resource&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_2.png&#34; alt=&#34;Creating Resource&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating Resource
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-method:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Method&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_3.png&#34; alt=&#34;Creating Method for GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating Method for GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_4.png&#34; alt=&#34;Assign Lambda function to GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Assign Lambda function to GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;test-your-get-method:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Test your GET Method&lt;/h2&gt;

&lt;p&gt;Now this API can be tested easily by just calling upon this URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://XXXXXXXXXXXX.execute-api.ap-northeast-1.amazonaws.com/test/resource_1/&#34;&gt;https://XXXXXXXXXXXX.execute-api.ap-northeast-1.amazonaws.com/test/resource_1/&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_5.png&#34; alt=&#34;Check your Response from Lambda using GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Check your Response from Lambda using GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;If you wanted to test from a URL, it would be actually going to this URL itself from the browser.&lt;/p&gt;

&lt;h1 id=&#34;misc:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Misc&lt;/h1&gt;

&lt;h2 id=&#34;using-cli:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Using CLI&lt;/h2&gt;

&lt;p&gt;Try the following command to get the list of your lambda functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws lambda --profile lambda.s3.1 --region ap-northeast-1 list-functions
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Functions&amp;quot;: [
        {
            &amp;quot;CodeSize&amp;quot;: 317,
            &amp;quot;FunctionArn&amp;quot;: &amp;quot;arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:lambda_1&amp;quot;,
            &amp;quot;MemorySize&amp;quot;: 128,
            &amp;quot;Role&amp;quot;: &amp;quot;arn:aws:iam::XXXXXXXXXXXX:role/lambda_basic_execution_1&amp;quot;,
            &amp;quot;Handler&amp;quot;: &amp;quot;lambda_function.lambda_handler&amp;quot;,
            &amp;quot;Runtime&amp;quot;: &amp;quot;python2.7&amp;quot;,
            &amp;quot;CodeSha256&amp;quot;: &amp;quot;.....&amp;quot;,
            &amp;quot;FunctionName&amp;quot;: &amp;quot;lambda_1&amp;quot;,
            &amp;quot;Timeout&amp;quot;: 183,
            &amp;quot;LastModified&amp;quot;: &amp;quot;2015-11-15T07:49:28.367+0000&amp;quot;,
            &amp;quot;Version&amp;quot;: &amp;quot;$LATEST&amp;quot;,
            &amp;quot;Description&amp;quot;: &amp;quot;An Amazon SNS trigger that logs the message pushed to the SNS topic.&amp;quot;
        },
        {
            &amp;quot;CodeSize&amp;quot;: 316,
            &amp;quot;FunctionArn&amp;quot;: &amp;quot;arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:lambda_2&amp;quot;,
            &amp;quot;MemorySize&amp;quot;: 128,
            &amp;quot;Role&amp;quot;: &amp;quot;arn:aws:iam::XXXXXXXXXXXX:role/lambda_basic_execution_1&amp;quot;,
            &amp;quot;Handler&amp;quot;: &amp;quot;lambda_function.lambda_handler&amp;quot;,
            &amp;quot;Runtime&amp;quot;: &amp;quot;python2.7&amp;quot;,
            &amp;quot;CodeSha256&amp;quot;: &amp;quot;.......&amp;quot;,
            &amp;quot;FunctionName&amp;quot;: &amp;quot;lambda_2&amp;quot;,
            &amp;quot;Timeout&amp;quot;: 3,
            &amp;quot;LastModified&amp;quot;: &amp;quot;2015-11-14T14:03:00.083+0000&amp;quot;,
            &amp;quot;Version&amp;quot;: &amp;quot;$LATEST&amp;quot;,
            &amp;quot;Description&amp;quot;: &amp;quot;An Amazon SNS trigger that logs the message pushed to the SNS topic.&amp;quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-policy-for-lambda-access:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Custom Policy for Lambda Access&lt;/h2&gt;

&lt;p&gt;Validate Policy
You can either just give &amp;ldquo;AmazonSNSFullAccess&amp;rdquo; to the user &lt;em&gt;lambda.s3.1&lt;/em&gt; or add the following Policy
onto &lt;strong&gt;User-&amp;gt;Permission-&amp;gt;Add Inline policy-&amp;gt;custom policy-&amp;gt;Select-&amp;gt;Policy Document&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Action&amp;quot;: [
        &amp;quot;sns:Publish&amp;quot;
      ],
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:sns:ap-northeast-1:YOUR_NUMBER:Commits_1&amp;quot;
      ],
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Setting up custom domain with Github Pages</title>
      <link>http://abhipandey.com/2015/10/setting-up-custom-domain-with-github-pages/</link>
      <pubDate>Sat, 24 Oct 2015 14:59:18 -0400</pubDate>
      
      <guid>http://abhipandey.com/2015/10/setting-up-custom-domain-with-github-pages/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s take the example of my domain itself &lt;code&gt;abhipandey.com&lt;/code&gt; that I want to serve from &lt;code&gt;abhi1010.github.io&lt;/code&gt;.
 We will need to do it in two steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup CNAME on github

&lt;ul&gt;
&lt;li&gt;So that github knows about your domain&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Setup &lt;strong&gt;A&lt;/strong&gt; record on AWS Route 53

&lt;ul&gt;
&lt;li&gt;So that domain can be registered&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;change-cname:75bfc49f34e22778d17e9b1837e9218b&#34;&gt;Change CNAME&lt;/h1&gt;

&lt;p&gt;If we want to tell github about the domain name, it is rather simple: &lt;em&gt;create a CNAME file with the content being
the name of the domain itself&lt;/em&gt;
Do &lt;em&gt;note&lt;/em&gt; here that the default redirect of your domain will be the value in your CNAME file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my &lt;a href=&#34;https://github.com/abhi1010/abhi1010.github.io/blob/master/CNAME&#34;&gt;CNAME file&lt;/a&gt; content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abhipandey.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t really need &lt;strong&gt;www&lt;/strong&gt;. If you do put &lt;em&gt;www.abhipandey.com&lt;/em&gt; github will figure out and redirect properly.
The difference is abhipandey.com is a top-level domain (TLD), while &lt;em&gt;www.abhipandey.com&lt;/em&gt; is a subdomain.&lt;/p&gt;

&lt;p&gt;Essentially:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your CNAME file contains &lt;em&gt;abhipandey.com&lt;/em&gt;, then &lt;em&gt;www.abhipandey.com&lt;/em&gt; will redirect to &lt;em&gt;abhipandey.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If your CNAME file contains &lt;em&gt;www.abhipandey.com&lt;/em&gt;, then &lt;em&gt;abhipandey.com&lt;/em&gt; will redirect to &lt;em&gt;www.abhipandey.com&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;creating-a-record:75bfc49f34e22778d17e9b1837e9218b&#34;&gt;Creating A Record&lt;/h1&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/custom-domain-name-with-github-pages-and-amazon-route-53_1.png&#34; alt=&#34;Setting up A record&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Setting up A record
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Next is to go to Amazon Route 53 console, and create an A record with the following IPs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;192.30.252.153
192.30.252.154
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;setup-subdomain:75bfc49f34e22778d17e9b1837e9218b&#34;&gt;Setup subdomain&lt;/h1&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/custom-domain-name-with-github-pages-and-amazon-route-53_2.png&#34; alt=&#34;Setting up subdomain&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Setting up subdomain
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;If you configure both an apex domain (e.g. &lt;em&gt;abhipandey.com&lt;/em&gt;) and a matching www subdomain (e.g. &lt;em&gt;www.abhipandey.com&lt;/em&gt;),
GitHub&amp;rsquo;s servers will automatically create redirects between the two.&lt;/p&gt;

&lt;p&gt;You can also also look up &lt;a href=&#34;https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/&#34;&gt;GitHub Tips&lt;/a&gt; for
configuring an &lt;strong&gt;A&lt;/strong&gt; record with your DNS provider.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convert GitHub Wiki to Static Site with themes</title>
      <link>http://abhipandey.com/2015/08/convert-github-wiki-to-static-site-with-themes/</link>
      <pubDate>Fri, 07 Aug 2015 14:59:18 -0400</pubDate>
      
      <guid>http://abhipandey.com/2015/08/convert-github-wiki-to-static-site-with-themes/</guid>
      <description>

&lt;p&gt;I recently wanted to setup a wiki so that I could convert it into a static html site with a proper themes.
What could be a possible use case for such a requirement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage the documentation of a product internally through &lt;code&gt;git&lt;/code&gt; but publish it for clients/world through static site&lt;/li&gt;
&lt;li&gt;Convert the uncolored wiki to a themed version&lt;/li&gt;
&lt;li&gt;Allow serving of the wiki through web application frameworks like &lt;code&gt;Django&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;It may allow you to have authentication system as a first step hurdle to stop everybody from giving access&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyways, I went about the whole process and decided to jot down everything. Here I am taking &lt;a href=&#34;https://github.com/mbostock/d3/wiki&#34;&gt;D3 Wiki&lt;/a&gt; as an example
which I will be converting into a static site. Let&amp;rsquo;s begin.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/wiki_to_static_1.png&#34; alt=&#34;D3 Wiki using pelican&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        D3 Wiki using pelican
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;setup-and-requirements:7286face6d57cb9f253b611714e09c9a&#34;&gt;Setup and requirements&lt;/h1&gt;

&lt;p&gt;What do we need to get started?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will need a static site generator

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s use &lt;a href=&#34;http://blog.getpelican.com&#34;&gt;&lt;code&gt;pelican&lt;/code&gt;&lt;/a&gt; for this demo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;An actual wiki

&lt;ul&gt;
&lt;li&gt;Since we are going to demo how to convert a wiki to static we will use an
&lt;a href=&#34;https://github.com/showcases/projects-with-great-wikis&#34;&gt;existing wiki from github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s choose &lt;a href=&#34;https://github.com/mbostock/d3/wiki&#34;&gt;D3 Wiki&lt;/a&gt; for this instance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python environment so that &lt;em&gt;pelican&lt;/em&gt; and &lt;em&gt;fabric&lt;/em&gt; can be installed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;virtual-environment-with-pelican:7286face6d57cb9f253b611714e09c9a&#34;&gt;Virtual Environment with pelican&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Setup the virtual environment&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ virtualenv ve_blog
$ source ve_blog/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Install pelican&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install pelican
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pelican Quickstart&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Setup pelican using &lt;code&gt;pelican-quickstart&lt;/code&gt; so that all files are setup correctly for creating a static site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pelican-quickstart

Welcome to pelican-quickstart v3.6.3.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

    
&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? D3 WIKI
&amp;gt; Who will be the author of this web site? abhi1010
&amp;gt; What will be the default language of this web site? [en] 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n) Y
&amp;gt; How many articles per page do you want? [10] 
&amp;gt; What is your time zone? [Europe/Paris] Asia/Singapore
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) Y
&amp;gt; Do you want to upload your website using FTP? (y/N) N
&amp;gt; Do you want to upload your website using SSH? (y/N) N
&amp;gt; Do you want to upload your website using Dropbox? (y/N) N
&amp;gt; Do you want to upload your website using S3? (y/N) N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) N
Done. Your new project is available at /Users/apandey/code/githubs/d3wiki
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-the-wiki:7286face6d57cb9f253b611714e09c9a&#34;&gt;Get the wiki&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/mbostock/d3.wiki.git

Cloning into &#39;d3.wiki&#39;...
remote: Counting objects: 12026, done.
remote: Compressing objects: 100% (67/67), done.
remote: Total 12026 (delta 607), reused 552 (delta 552), pack-reused 11407
Receiving objects: 100% (12026/12026), 9.92 MiB | 1.49 MiB/s, done.
Resolving deltas: 100% (7595/7595), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Setting the wiki as content for pelican&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rmdir content
$ ln -s dr.wiki content
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;why-simple-pelican-won-t-work-and-what-to-do:7286face6d57cb9f253b611714e09c9a&#34;&gt;Why simple pelican won&amp;rsquo;t work and what to do&lt;/h1&gt;

&lt;p&gt;If you tried to simply call &lt;code&gt;pelican&lt;/code&gt; command to build the static site, you will notice a lot of errors like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ fab build

RROR: Skipping ./请求.md: could not find information about &#39;NameError: title&#39;
ERROR: Skipping ./过渡.md: could not find information about &#39;NameError: title&#39;
ERROR: Skipping ./选择器.md: could not find information about &#39;NameError: title&#39;
ERROR: Skipping ./选择集.md: could not find information about &#39;NameError: title&#39;
Done: Processed 0 articles, 0 drafts, 0 pages and 0 hidden pages in 3.47 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that pelican expects some variables to be defined in each &lt;em&gt;markdown&lt;/em&gt; file before it can build the static file.
 Some of the variables are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Slug&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may add your own &lt;a href=&#34;http://docs.getpelican.com/en/3.6.3/content.html#file-metadata&#34;&gt;ones as well&lt;/a&gt; that you want.
 However, for our initial purposes, we will keep it simple and just try to add these.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, how do we achieve this automation?
&lt;strong&gt;&lt;code&gt;fab&lt;/code&gt; is our answer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s write a function in python that will modify the markdown files and update them to add &lt;em&gt;Title, Slug, Date&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will edit &lt;code&gt;fabfile.py&lt;/code&gt; and add a new function &lt;code&gt;create_wiki&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_wiki():
    files = []
    # Find all markdown files in content folder 
    for f in os.walk(&#39;./content/&#39;):
        fpath = lambda x: os.path.join(f[0], x)
        for file in f[2]:
            fullpath = fpath(file)
            # print(&#39;f = {}&#39;.format(fullpath))
            files.append(fullpath)
    filtered = [f for f in files if f.endswith(&#39;.md&#39;)]
    for file in filtered:
        with open(file, &#39;r+&#39;) as f:
            content = f.read()
            f.seek(0, 0)
            base = os.path.basename(file).replace(&#39;.md&#39;, &#39;&#39;) 
            lines = [&#39;Title: {}&#39;.format(base.replace(&#39;-&#39;, &#39; &#39;)),
                    &#39;Slug: {}&#39;.format(base),
                    &#39;Date: 2015-08-07T14:59:18-04:00&#39;,
                    &#39;&#39;, &#39;&#39;]
            line = &#39;\n&#39;.join(lines)
            # Add the lines to the file
            f.write(line + &#39;\n&#39; + content)
        print(file)
    
    # build and serve the website
    build()
    serve()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can call this function easily:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fab create_wiki
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The website can now be viewed at &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-happened-to-the-menu:7286face6d57cb9f253b611714e09c9a&#34;&gt;What happened to the menu?&lt;/h1&gt;

&lt;p&gt;There is a minor issue here though, you will notice that the menu is not available - it is all empty.
It is an easy addition. We will need to add some lines to &lt;code&gt;publishconf.py&lt;/code&gt; to say what the menu is gonna be.&lt;/p&gt;

&lt;p&gt;For my example, I have chosen to show up the following for &lt;em&gt;D3&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API Reference&lt;/li&gt;
&lt;li&gt;Tutorials&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We don&#39;t want all pages to show up in menu
DISPLAY_PAGES_ON_MENU = False

# Choose the specific pages that should be part of menu
MENUITEMS = ( 
    (&#39;HOME&#39;, &#39;/home.html&#39;),
    (&#39;API Reference&#39;, &#39;/API-Reference.html&#39;),
    (&#39;Tutorials&#39;, &#39;/Tutorials.html&#39;),
    (&#39;Plugins&#39;, &#39;/Plugins.html&#39;),
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;choosing-themes:7286face6d57cb9f253b611714e09c9a&#34;&gt;Choosing themes&lt;/h1&gt;

&lt;p&gt;By default, pelican uses its own theme for the static site, but theme can be modified.
Let&amp;rsquo;s choose &lt;code&gt;pelican bootstrap3&lt;/code&gt; for our example here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/DandyDev/pelican-bootstrap3.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, add the full path to the theme at the end of the &lt;code&gt;publishconf.py&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;THEME = &amp;quot;/Users/apandey/code/githubs/pelican_coders/all_themes/pelican-bootstrap3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, build your site again and serve:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fab build
fab serve
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/wiki_to_static_2.png&#34; alt=&#34;Pelican Bootstrap3 theme&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Pelican Bootstrap3 theme
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;get-all-this-code-in-github-repo:7286face6d57cb9f253b611714e09c9a&#34;&gt;Get all this code in github repo&lt;/h1&gt;

&lt;p&gt;I realize there maybe a few things going on here. You can get this whole setup as a project from
my &lt;a href=&#34;https://github.com/abhi1010/d3wiki&#34;&gt;github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will find all this code and setup so that your life is easier. Just start with d3 wiki along with virtual environment and you will be fine.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>