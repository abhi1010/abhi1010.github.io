<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Coders Digest</title>
    <link>http://abhipandey.com/tags/git/</link>
    <description>Recent content in Git on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Nov 2015 07:49:00 +0000</lastBuildDate>
    <atom:link href="http://abhipandey.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lambda Basics with Python using Github Webhooks or API Gateway</title>
      <link>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</link>
      <pubDate>Wed, 04 Nov 2015 07:49:00 +0000</pubDate>
      
      <guid>http://abhipandey.com/2015/11/lambda-basics-with-python-using-github-webhooks-or-api-gateway/</guid>
      <description>

&lt;p&gt;I recently needed to call a command whenever there was a push on my Github repo.
Since this was related to AWS tasks, I figured &lt;code&gt;aws lambda&lt;/code&gt; is a good candidate.
Here I will talk about the steps I took to enable all of this using aws lambda, python.
As a side note, I will also elaborate on using API gateway to call upon the lambda itself.&lt;/p&gt;

&lt;p&gt;In a nutshell, what I will talk about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;SNS&lt;/strong&gt; Topic&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;IAM user&lt;/strong&gt; who can Publish&lt;/li&gt;
&lt;li&gt;Setup &lt;strong&gt;GitHub webhook&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;Lambda function&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Setup &lt;strong&gt;API Gateway&lt;/strong&gt; url that can call lambda function&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-sns-topic:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create SNS Topic&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://ap-northeast-1.console.aws.amazon.com/sns/v2/home?region=ap-northeast-1#/home&#34;&gt;AWS Console&lt;/a&gt; and click on Create Topic.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_sns_1.png&#34; alt=&#34;Creating an API&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating an API
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Note down the &lt;code&gt;ARN&lt;/code&gt; because you will need that.
In my case it is something like &lt;code&gt;arn:aws:sns:ap-northeast-1:XXXXXXXXXXXX:commits_1&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;create-iam-user:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create IAM user&lt;/h1&gt;

&lt;p&gt;We need to setup an IAM user who can publish onto this SNS we just created.
As a shortcut you can just create a simple user and initialize it with full access rights for testing purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once on IAM page click on &amp;ldquo;Create New Users&amp;rdquo; button at the top.&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_1.png&#34; alt=&#34;Creating new IAM user&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating new IAM user
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It will then allow you to download credentials if you want&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_2.png&#34; alt=&#34;Creating new IAM user&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating new IAM user
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;add-permissions:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Add permissions&lt;/h2&gt;

&lt;p&gt;Once an IAM user is created, by default there are no permissions attached to the account.
&lt;strong&gt;You can add permissions by going to permissions tab and clicking on &amp;ldquo;Attach Policy&amp;rdquo; button&lt;/strong&gt;.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_iam_3.png&#34; alt=&#34;Attach Policy&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Attach Policy
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;setup-github-webhook:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Setup GitHub webhook&lt;/h1&gt;

&lt;p&gt;We need to assign a webhook for each Git commit. So let&amp;rsquo;s do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to your GitHub repo&lt;/li&gt;
&lt;li&gt;Click on “Settings” in the sidebar of that repo

&lt;ul&gt;
&lt;li&gt;It has to be an actual repo settings, not profile settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Click on “Webhooks &amp;amp; Services”&lt;/li&gt;
&lt;li&gt;Click the “Add service” dropdown, then click “AmazonSNS”

&lt;ul&gt;
&lt;li&gt;You will need the account details for the IAM user you just created&lt;/li&gt;
&lt;li&gt;The trigger will be delegated through this given IAM user&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Add SNS Webhook&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_webhooks_1.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add Account details from IAM user&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_webhooks_2.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;create-lambda-function:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Lambda function&lt;/h1&gt;

&lt;p&gt;Now that we have creater a user, assigned a trigger on Github, we need to create a function
that will be run on an actual trigger.
Let&amp;rsquo;s create a lambda function by going to &lt;a href=&#34;https://ap-northeast-1.console.aws.amazon.com/lambda/home?region=ap-northeast-1#/functions&#34;&gt;AWS Lambda&lt;/a&gt; and
clicking on &amp;ldquo;Create a Lambda Function&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Filter by SNS in the given samples because we want to see SNS functions.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_lambda_1.png&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;em&gt;Ensure that you select your SNS as the event source.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a Lambda function with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
print(&#39;Loading function&#39;)

def lambda_handler(event, context):
    print(&amp;quot;Received event: &amp;quot; + json.dumps(event, indent=2))
    message = event[&#39;Records&#39;][0][&#39;Sns&#39;][&#39;Message&#39;]
    print(&amp;quot;From SNS: &amp;quot; + message)
    return message
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_lambda_2.png&#34; alt=&#34;Python code&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Python code
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;testing-the-setup-so-far:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Testing the setup so far&lt;/h1&gt;

&lt;h2 id=&#34;testing-github-webhook:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Testing GitHub webhook&lt;/h2&gt;

&lt;p&gt;Now that we have setup &lt;strong&gt;Lambda, SNS, and Github&lt;/strong&gt; so far, it is time to test the setup.&lt;/p&gt;

&lt;p&gt;Go to the &amp;ldquo;Webhooks and Services&amp;rdquo; under you repo settings and click on &amp;ldquo;Amazon SNS&amp;rdquo; that is
viewable at the bottom of that page. You will then be able to test the service.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_1.png&#34; /&gt;
    
    
&lt;/figure&gt;

There&amp;rsquo;s a button at the top right &amp;ldquo;Test service&amp;rdquo;. Once you click it, GitHub will confirm that the message is indeed sent.&lt;/p&gt;

&lt;h2 id=&#34;checking-aws:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Checking AWS&lt;/h2&gt;

&lt;p&gt;Now that we have been able to send the message, we also need to confirm that the lambda was actually called.&lt;/p&gt;

&lt;p&gt;This can be done by looking at CloudWatch logs. Any lambda run will be logged under CloudWatch.
Even normal logging is also available there.

&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_2.png&#34; alt=&#34;Going to CloudWatch&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Going to CloudWatch
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_results_3.png&#34; alt=&#34;Checking the lambda logs&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Checking the lambda logs
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;setup-api-gateway:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Setup API Gateway&lt;/h1&gt;

&lt;p&gt;After all this is done, we can even &lt;strong&gt;create an API along with a public facing URL&lt;/strong&gt;
where all these services can be called (apart from just GitHub), if you&amp;rsquo;d like.
So let&amp;rsquo;s do that.&lt;/p&gt;

&lt;h2 id=&#34;create-api:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create API&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_1.png&#34; alt=&#34;Creating an API&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating an API
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-resource:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Resource&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_2.png&#34; alt=&#34;Creating Resource&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating Resource
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;create-method:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Create Method&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_3.png&#34; alt=&#34;Creating Method for GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Creating Method for GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_4.png&#34; alt=&#34;Assign Lambda function to GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Assign Lambda function to GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;test-your-get-method:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Test your GET Method&lt;/h2&gt;

&lt;p&gt;Now this API can be tested easily by just calling upon this URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://XXXXXXXXXXXX.execute-api.ap-northeast-1.amazonaws.com/test/resource_1/&#34;&gt;https://XXXXXXXXXXXX.execute-api.ap-northeast-1.amazonaws.com/test/resource_1/&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/lambda_basics_api_5.png&#34; alt=&#34;Check your Response from Lambda using GET&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Check your Response from Lambda using GET
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;If you wanted to test from a URL, it would be actually going to this URL itself from the browser.&lt;/p&gt;

&lt;h1 id=&#34;misc:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Misc&lt;/h1&gt;

&lt;h2 id=&#34;using-cli:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Using CLI&lt;/h2&gt;

&lt;p&gt;Try the following command to get the list of your lambda functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ aws lambda --profile lambda.s3.1 --region ap-northeast-1 list-functions
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;Functions&amp;quot;: [
        {
            &amp;quot;CodeSize&amp;quot;: 317,
            &amp;quot;FunctionArn&amp;quot;: &amp;quot;arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:lambda_1&amp;quot;,
            &amp;quot;MemorySize&amp;quot;: 128,
            &amp;quot;Role&amp;quot;: &amp;quot;arn:aws:iam::XXXXXXXXXXXX:role/lambda_basic_execution_1&amp;quot;,
            &amp;quot;Handler&amp;quot;: &amp;quot;lambda_function.lambda_handler&amp;quot;,
            &amp;quot;Runtime&amp;quot;: &amp;quot;python2.7&amp;quot;,
            &amp;quot;CodeSha256&amp;quot;: &amp;quot;.....&amp;quot;,
            &amp;quot;FunctionName&amp;quot;: &amp;quot;lambda_1&amp;quot;,
            &amp;quot;Timeout&amp;quot;: 183,
            &amp;quot;LastModified&amp;quot;: &amp;quot;2015-11-15T07:49:28.367+0000&amp;quot;,
            &amp;quot;Version&amp;quot;: &amp;quot;$LATEST&amp;quot;,
            &amp;quot;Description&amp;quot;: &amp;quot;An Amazon SNS trigger that logs the message pushed to the SNS topic.&amp;quot;
        },
        {
            &amp;quot;CodeSize&amp;quot;: 316,
            &amp;quot;FunctionArn&amp;quot;: &amp;quot;arn:aws:lambda:ap-northeast-1:XXXXXXXXXXXX:function:lambda_2&amp;quot;,
            &amp;quot;MemorySize&amp;quot;: 128,
            &amp;quot;Role&amp;quot;: &amp;quot;arn:aws:iam::XXXXXXXXXXXX:role/lambda_basic_execution_1&amp;quot;,
            &amp;quot;Handler&amp;quot;: &amp;quot;lambda_function.lambda_handler&amp;quot;,
            &amp;quot;Runtime&amp;quot;: &amp;quot;python2.7&amp;quot;,
            &amp;quot;CodeSha256&amp;quot;: &amp;quot;.......&amp;quot;,
            &amp;quot;FunctionName&amp;quot;: &amp;quot;lambda_2&amp;quot;,
            &amp;quot;Timeout&amp;quot;: 3,
            &amp;quot;LastModified&amp;quot;: &amp;quot;2015-11-14T14:03:00.083+0000&amp;quot;,
            &amp;quot;Version&amp;quot;: &amp;quot;$LATEST&amp;quot;,
            &amp;quot;Description&amp;quot;: &amp;quot;An Amazon SNS trigger that logs the message pushed to the SNS topic.&amp;quot;
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-policy-for-lambda-access:f657bc8efd67a0e2d83aeda4b346f8af&#34;&gt;Custom Policy for Lambda Access&lt;/h2&gt;

&lt;p&gt;Validate Policy
You can either just give &amp;ldquo;AmazonSNSFullAccess&amp;rdquo; to the user &lt;em&gt;lambda.s3.1&lt;/em&gt; or add the following Policy
onto &lt;strong&gt;User-&amp;gt;Permission-&amp;gt;Add Inline policy-&amp;gt;custom policy-&amp;gt;Select-&amp;gt;Policy Document&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Action&amp;quot;: [
        &amp;quot;sns:Publish&amp;quot;
      ],
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:sns:ap-northeast-1:YOUR_NUMBER:Commits_1&amp;quot;
      ],
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Automated Git Mirror With GitHub or Gitlab or Bitbucket</title>
      <link>http://abhipandey.com/2015/09/automated-git-mirror-with-github-or-gitlab-or-bitbucket/</link>
      <pubDate>Sun, 27 Sep 2015 13:30:10 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/automated-git-mirror-with-github-or-gitlab-or-bitbucket/</guid>
      <description>

&lt;h1 id=&#34;experience-with-gitlab-ci:e8d2b63c4e2d32c203d45ddfe7306ca8&#34;&gt;Experience with Gitlab CI&lt;/h1&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhipandey.com/images/git_mirror_with_gitlab__ci.png&#34; alt=&#34;Git Mirror from Gitlab to Bitbucket using Gitlab CI&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Git Mirror from Gitlab to Bitbucket using Gitlab CI
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Had to move from &lt;code&gt;BitBucket&lt;/code&gt; to &lt;code&gt;Gitlab&lt;/code&gt;; which is really great, btw. However, there was one tiny issue here - &lt;code&gt;Gitlab&lt;/code&gt; was not supported by &lt;code&gt;Shippable&lt;/code&gt;.
As you may know already &lt;code&gt;Shippable&lt;/code&gt; is a hosted cloud platform that provides hosted continuous integration.
We use it in our current setup to do a full testing and deployment onto &lt;code&gt;AWS Elastic Beanstalk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we were moving to &lt;code&gt;Gitlab&lt;/code&gt; I wanted to continue using &lt;code&gt;Shippable&lt;/code&gt; for our prod deployments. &lt;code&gt;Shippable&lt;/code&gt; only supports &lt;code&gt;Github&lt;/code&gt; or &lt;code&gt;Bitbucket&lt;/code&gt; and therein lies the problem.
&lt;code&gt;Gitlab&lt;/code&gt; did not work with &lt;code&gt;Circl CI&lt;/code&gt; or &lt;code&gt;Travis CI&lt;/code&gt; or &lt;code&gt;Shippable&lt;/code&gt; or &lt;code&gt;Wercker&lt;/code&gt; so I tried using &lt;code&gt;Gitlab CI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, there were some issues with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runs the tasks as standalone but are not part of a &lt;code&gt;Docker&lt;/code&gt; process

&lt;ul&gt;
&lt;li&gt;This means &lt;code&gt;Gitlab CI&lt;/code&gt; does not work similar to &lt;code&gt;Circl CI&lt;/code&gt; or &lt;code&gt;Travis CI&lt;/code&gt; or &lt;code&gt;Shippable&lt;/code&gt; or &lt;code&gt;Wercker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sometimes CI takes long to be triggered even though it registers you to be running right after your commit&lt;/li&gt;
&lt;li&gt;The terms are a bit different compared to the other cloud based continuous integration sites

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Gitlab CI&lt;/code&gt; supposedly tries to improve upon other tools but in the process ensures that you need to learn CI again if you want to use them&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried using the same yaml was &lt;code&gt;Shippable&lt;/code&gt; but it was just not working with too many errors being reported and not to mention, having to wait for an hour during the worst period to see results.
&lt;code&gt;Shippable&lt;/code&gt; on the other hand, would hand over the console and results within 5 minutes of my commits. Decided to ditch &lt;code&gt;Gitlab CI&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;using-git-mirror:e8d2b63c4e2d32c203d45ddfe7306ca8&#34;&gt;Using Git Mirror&lt;/h1&gt;

&lt;p&gt;Since &lt;code&gt;Gitlab CI&lt;/code&gt; was clearing not working I decided to continue using &lt;code&gt;Shippable&lt;/code&gt;. The only issue was, code had to exist in &lt;code&gt;Bitbucket&lt;/code&gt;.
 For that, I needed a git mirror from &lt;code&gt;Gitlab&lt;/code&gt; to &lt;code&gt;Bitbucket&lt;/code&gt;. Looking into docs I found this link - &lt;a href=&#34;http://docs.shippable.com/using_gitlab/&#34;&gt;http://docs.shippable.com/using_gitlab/&lt;/a&gt;.
 Other options mentioned setting up configs to add a mirror. For example, look here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/21551929/how-to-make-a-github-mirror-to-bitbucket&#34;&gt;http://stackoverflow.com/questions/21551929/how-to-make-a-github-mirror-to-bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git-mirror-sync/git-mirror-sync&#34;&gt;git mirror sync as a service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22906917/how-to-move-git-repository-with-all-branches-from-bitbucket-to-github&#34;&gt;http://stackoverflow.com/questions/22906917/how-to-move-git-repository-with-all-branches-from-bitbucket-to-github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had a major problem with all the options - every developer had to set it up for this to work on every commit.&lt;/p&gt;

&lt;p&gt;I looked into webhooks and triggers on &lt;code&gt;Gitlab&lt;/code&gt; but webhooks would have old code (unless I updated the code manually before loading).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, the only way I saw fit to fix this issue was the &lt;code&gt;Gitlab CI&lt;/code&gt; itself.&lt;/strong&gt; I set up a git push as a one-step CI on &lt;code&gt;Gitlab&lt;/code&gt; itself.
 This would do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A commit on &lt;code&gt;Gitlab&lt;/code&gt; leads to CI enabling this &lt;code&gt;git push --mirror&lt;/code&gt; through the file &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When the commit is mirrored on &lt;code&gt;Bitbucket&lt;/code&gt;, the webhook there is registered with &lt;code&gt;Shippable&lt;/code&gt; which triggers the actual deployment through &lt;code&gt;shippable.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In a way &lt;code&gt;Shippable&lt;/code&gt; doesn&amp;rsquo;t need to know anything about &lt;code&gt;Gitlab&lt;/code&gt; which is great&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s my &lt;strong&gt;&lt;em&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;stages&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deploy&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;Git MIRROR&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;stage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deploy&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;git push --mirror https://BITBUCKET_USERNAME:BITBUCKET_PASSWORD@bitbucket.org/group/repo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Remember to use variables in &lt;code&gt;Gitlab CI&lt;/code&gt; to set up your bitbucket username and password.
  &lt;strong&gt;This had to be done&lt;/strong&gt; because you can&amp;rsquo;t have any ssh key from &lt;code&gt;Gitlab&lt;/code&gt; to add it to &lt;code&gt;Bitbucket&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git LOC Stats by Time Range</title>
      <link>http://abhipandey.com/2015/09/git-loc-stats-by-time-range/</link>
      <pubDate>Thu, 17 Sep 2015 11:06:06 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/git-loc-stats-by-time-range/</guid>
      <description>&lt;p&gt;Recently had an interest in seeing how many LOC were committed to the code base over a particular period of
time. After some tinkering around, mainly to find out the correct format for time ranges, decided to use the following bash script for finding coding stats.
Following sample is to find out lines added or removed during the year 2014.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ git log --after&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;2014-1-1&amp;quot;&lt;/span&gt; --before&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;2014-12-31&amp;quot;&lt;/span&gt; --pretty&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;tformat: --numstat 
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;{ if ( $2 != 0 &amp;amp;&amp;amp; $1 != 0 ) print $0 }&amp;#39;&lt;/span&gt; 
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt; gawk &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &amp;quot;Added lines: %s Removed lines: %s Total # of lines: %s\n&amp;quot;, add, subs, loc }&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Added lines: 327505 Removed lines: 243860 Total # of lines: 83645
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will notice in the second line that I am doing the following:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt; if ( $2 != 0 &amp;amp;&amp;amp; $1 != 0 ) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is simply to discard off any commit numbers that were pure addition or deletion (with no corresponding delete or add in the same commit).
It may also remove some numbers that were actually valid commits but mostly it is to protect ourselves against any library or API that we may have added or replaced during that time period.&lt;/p&gt;

&lt;p&gt;For time range, you may even use something like &lt;code&gt;--since=&amp;quot;1 year ago&amp;quot;&lt;/code&gt; and that will also yield similar results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using External Tools with Git Diff</title>
      <link>http://abhipandey.com/2015/09/using-external-tools-with-git-diff/</link>
      <pubDate>Thu, 10 Sep 2015 00:18:24 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/using-external-tools-with-git-diff/</guid>
      <description>&lt;p&gt;If you want to view what has changed since one commit to another, it is quite easy to view the diff.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git diff 5fad06c..0a504fa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will get something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;diff --git a/modules/file_1.erb b/modules/file_1.erb&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;index 0538da0..6621d93 100644&lt;/span&gt;
&lt;span style=&#34;color: #a40000&#34;&gt;--- a/modules/file_1.erb&lt;/span&gt;
&lt;span style=&#34;color: #00A000&#34;&gt;+++ b/modules/file_1.erb&lt;/span&gt;
&lt;span style=&#34;color: #800080; font-weight: bold&#34;&gt;@@ -5,8 +5,8 @@&lt;/span&gt;
 
   // Algo settings
   &amp;quot;Carbo&amp;quot;: {
&lt;span style=&#34;color: #a40000&#34;&gt;-    &amp;quot;active-instrument&amp;quot;: &amp;quot;SGX/NK15&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #a40000&#34;&gt;-    &amp;quot;hedge-instrument&amp;quot;: &amp;quot;SGX/NK16&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #00A000&#34;&gt;+    &amp;quot;active-instrument&amp;quot;: &amp;quot;SGX/NK17&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #00A000&#34;&gt;+    &amp;quot;hedge-instrument&amp;quot;: &amp;quot;SGX/NK18&amp;quot;,&lt;/span&gt;
     &amp;quot;owner-app-id&amp;quot;: &amp;quot;abhi1010&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if you wanted a use an external tool like &lt;code&gt;meld&lt;/code&gt; to view the diff, in a nice beautiful side by side view? You&amp;rsquo;d have to modify your settings to tell that to &lt;code&gt;git&lt;/code&gt;.
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git config --global diff.tool meld
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Finally, then to view the diff:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git difftool 5fad06c..0a504fa
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updating Django Source with Docker Deployments</title>
      <link>http://abhipandey.com/2015/09/updating-django-source-with-docker-deployments/</link>
      <pubDate>Fri, 04 Sep 2015 00:11:51 +0800</pubDate>
      
      <guid>http://abhipandey.com/2015/09/updating-django-source-with-docker-deployments/</guid>
      <description>

&lt;p&gt;While deploying docker multiple times, you may not want to copy over your &lt;code&gt;Django&lt;/code&gt; source code every time you do a deployment.&lt;/p&gt;

&lt;h1 id=&#34;setting-up-supervisord:8ef139736ad377184214844940ced19b&#34;&gt;Setting up &lt;code&gt;supervisord&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Luckily there is an easy way to manage this. Since you are working with &lt;code&gt;Django&lt;/code&gt;, there is a good chance that you are also managing the processes (like &lt;code&gt;uwsgi&lt;/code&gt;) with &lt;code&gt;supervisord&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are some of the steps that you can take with &lt;code&gt;supervisord&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a new process in &lt;code&gt;supervisord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Do not allow it to &lt;em&gt;&lt;code&gt;autorestart&lt;/code&gt;&lt;/em&gt; since it will be a one-shot process&lt;/li&gt;
&lt;li&gt;Call another script in any format to update the source code

&lt;ul&gt;
&lt;li&gt;As an example, I use &lt;code&gt;bash&lt;/code&gt; to update my source code through &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a sample code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;program:source-updater&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;redirect_stderr&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;stdout_logfile&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /shared/source_code_updater.log
    &lt;span style=&#34;color: #000000&#34;&gt;directory&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/
    &lt;span style=&#34;color: #204a87&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/source_code_updater.sh
    &lt;span style=&#34;color: #000000&#34;&gt;autorestart&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;False
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;updating-the-source-code:8ef139736ad377184214844940ced19b&#34;&gt;Updating the source code&lt;/h1&gt;

&lt;p&gt;Few things are important to note in a &lt;code&gt;docker&lt;/code&gt; deployment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not every commit needs to be deployed&lt;/li&gt;
&lt;li&gt;Filter your commits to only allow &lt;strong&gt;&lt;em&gt;deployable&lt;/em&gt;&lt;/strong&gt; code to be updated on &lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Include regression, unit and system tests to be part of your build process&lt;/li&gt;
&lt;li&gt;Once everything has been confirmed to be working, tag your code so that you know it is worthy of going to docker&lt;/li&gt;
&lt;li&gt;Another way would be to manage this process through branches and merge only if everything passes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt; deployments would build off this merged branch or tagged version&lt;/li&gt;
&lt;li&gt;This way even if you have made 10 commits while fixing a bug and are still in the process of fixing it, you know it won&amp;rsquo;t go to &lt;code&gt;docker&lt;/code&gt; deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that idea, do a checkout and update the source code according to specific tag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    git checkout -f tags/your_tag_name
    git pull origin tags/your_tag_name
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;telling-uwsgi-about-the-updated-source-code:8ef139736ad377184214844940ced19b&#34;&gt;Telling &lt;code&gt;uwsgi&lt;/code&gt; about the updated source code&lt;/h1&gt;

&lt;p&gt;Once you have updated your source code, you need to re-load the project onto &lt;code&gt;uwsgi&lt;/code&gt; so that &lt;code&gt;nginx&lt;/code&gt; or &lt;code&gt;apache&lt;/code&gt; can pick it up.
The simplest way to achieve it using the config parameter of &lt;code&gt;uwsgi&lt;/code&gt;: &lt;code&gt;--touch-reload&lt;/code&gt;. It will &lt;em&gt;reload uWSGI if the specified file is modified/touched&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just remember to setup &lt;code&gt;supervisord&lt;/code&gt; in your &lt;code&gt;Dockerfile&lt;/code&gt; with this config parameter.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;program:app-uwsgi&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;redirect_stderr&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;stdout_logfile&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /var/shared/_uwsgi.log
&lt;span style=&#34;color: #204a87&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/ve_envs/rwv2/bin/uwsgi --touch-reload&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;/ws/wsgi.ini --ini /ws/wsgi.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can choose any file. I choose &lt;code&gt;uwsgi.ini&lt;/code&gt; because the contents never really need to change in it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>