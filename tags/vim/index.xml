<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Coders Digest</title>
    <link>http://abhipandey.com/tags/vim/</link>
    <description>Recent content in Vim on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 May 2014 15:51:51 +0000</lastBuildDate>
    <atom:link href="http://abhipandey.com/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting up your VIM... Your style</title>
      <link>http://abhipandey.com/2014/05/setting-up-your-vim...-your-style/</link>
      <pubDate>Mon, 19 May 2014 15:51:51 +0000</pubDate>
      
      <guid>http://abhipandey.com/2014/05/setting-up-your-vim...-your-style/</guid>
      <description>&lt;p&gt;Writing code using VIM can be a bit overwhelming but it helps creating a few shortcuts there to make your life easier. Here I will discuss a few.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, it is always a good idea to set up your tabs and spaces&lt;/li&gt;
&lt;li&gt;Set up shortcuts for:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Toggling of Auto-Indent&lt;/code&gt; while pasting source text; very useful in code (&lt;em&gt;F2&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Toggling of Auto-Scroll&lt;/code&gt; of Split windows (&lt;em&gt;F3&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Macro for Folding functions&lt;/code&gt; within the source code (&lt;em&gt;&lt;em&gt;@q&lt;/em&gt;&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Smart case search&lt;/code&gt; - based on whether the input is in caps or not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Toggling of Mouse Usage&lt;/code&gt; in VIM window - to allow quick selection of text (&lt;em&gt;F12&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see the provided script below to have a look.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/6f190c9f3afd42881ef5.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Global Search in VIM</title>
      <link>http://abhipandey.com/2014/02/global-search-in-vim/</link>
      <pubDate>Tue, 11 Feb 2014 14:56:00 +0000</pubDate>
      
      <guid>http://abhipandey.com/2014/02/global-search-in-vim/</guid>
      <description>&lt;p&gt;You must be knowing about regular VIM search&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%s/SEARCH/REPLACE/CMD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, sometimes you do not want to replace something but just see all instances of the a word or phrase. In such cases, global search is really useful when on vim. The syntax is simpler than normal search-replace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:[range]g[lobal]/{pattern}/[cmd]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will show all instances of the &amp;ldquo;SEARCH&amp;rdquo; term within the VIM window. There&amp;rsquo;s another version of the same command which is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:[range]g[lobal]!/{pattern}/[cmd]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is similar to the previous command but the only difference is that this command contains &amp;ldquo;!&amp;rdquo; which signifies that the command will be executed on all lines &lt;code&gt;NOT&lt;/code&gt; matching the &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One example here would be to delete all lines in a file containing a particular word:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:g/deleteMe/d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There could be lot more actions (regular vim stuff) that you could do like yanking or indenting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cursor Control in VIM Search</title>
      <link>http://abhipandey.com/2013/06/cursor-control-in-vim-search/</link>
      <pubDate>Tue, 11 Jun 2013 07:05:00 +0000</pubDate>
      
      <guid>http://abhipandey.com/2013/06/cursor-control-in-vim-search/</guid>
      <description>&lt;p&gt;Found a great way to search for keywords &amp;amp;&amp;amp; control the location of cursor in vim. It is excellent if you want to do a particular task multiple times. Usually if you search the cursor will straight away take you to the start of search. What if you want to go to the end of the word you are searching for?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/pattern/e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes you to the END of the keyword you are looking for.&lt;/p&gt;

&lt;p&gt;That’s not all. What if you want to go the second letter in that keyword? Change the pattern to as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/pattern/s+1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s great. But what if I want to go to the end of the keyword?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/pattern/e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome. Let’s review it through examples. Let’s say our phrase is “the brown fox jumped over the lazy dog” and we originally want to search for “brown”.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;CURSOR LOCATED AT BEGINNING OF&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/brown&lt;/td&gt;
&lt;td&gt;brown fox….&lt;/td&gt;
&lt;td&gt;search and start at “brown”&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/brown/s+2&lt;/td&gt;
&lt;td&gt;own fox…&lt;/td&gt;
&lt;td&gt;start at “brown” but move 2 letters from ‘start’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/brown/s-4&lt;/td&gt;
&lt;td&gt;the brown fox…&lt;/td&gt;
&lt;td&gt;start at “brown” but move 4 letters to the left from ‘start’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/brown/e&lt;/td&gt;
&lt;td&gt;n fox….&lt;/td&gt;
&lt;td&gt;search for “brown” but move to the end&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/brown/e+2&lt;/td&gt;
&lt;td&gt;fox…&lt;/td&gt;
&lt;td&gt;search for “brown” but move 2 letters from the ‘end’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/brown/e-1&lt;/td&gt;
&lt;td&gt;wn fox…&lt;/td&gt;
&lt;td&gt;search for “brown” but move 1 letter to the left from the ‘end’&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>