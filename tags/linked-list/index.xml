<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linked List on Coders Digest</title>
    <link>http://abhipandey.com/tags/linked-list/</link>
    <description>Recent content in Linked List on Coders Digest</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jun 2014 15:02:07 +0000</lastBuildDate>
    <atom:link href="http://abhipandey.com/tags/linked-list/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Partition Linked List around a Value X</title>
      <link>http://abhipandey.com/2014/06/partition-linked-list-around-a-value-x/</link>
      <pubDate>Mon, 09 Jun 2014 15:02:07 +0000</pubDate>
      <guid>http://abhipandey.com/2014/06/partition-linked-list-around-a-value-x/</guid>
      <description>&lt;p&gt;How do you partition a list around a value x, such that all nodes less than x come before all nodes greater than or equal to x?&lt;/p&gt;&#xA;&lt;p&gt;Well, there are some solutions possible. The solution, I came up with, is a bit convoluted but let me tell the idea behind it. You want to track the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Two pointers to remember the beginning of the &lt;em&gt;lower&lt;/em&gt; and &lt;em&gt;higher&lt;/em&gt; series each&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find the Kth to Last Element of a Singly Linked List</title>
      <link>http://abhipandey.com/2014/06/find-the-kth-to-last-element-of-a-singly-linked-list/</link>
      <pubDate>Sun, 08 Jun 2014 07:49:47 +0000</pubDate>
      <guid>http://abhipandey.com/2014/06/find-the-kth-to-last-element-of-a-singly-linked-list/</guid>
      <description>&lt;p&gt;It is possible to a recursive solutions but I will use a simple runner logic. Recursive solutions are usually less optimal.&lt;/p&gt;&#xA;&lt;p&gt;Note here that, in our logic K=1 would return the last element in the linked list. Similarly, K=2 would return the second last element.&lt;/p&gt;&#xA;&lt;p&gt;The suggested solution here is to use two pointers:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;One pointer will first travel K items into the list&lt;/li&gt;&#xA;&lt;li&gt;Once that is done, both the pointers start travelling together, one item at a time&lt;/li&gt;&#xA;&lt;li&gt;They keep travelling until the end of linked list is found&lt;/li&gt;&#xA;&lt;li&gt;In that situation, the first pointer is at the end of the list, but the second pointer would have only reached till Kth element - this is what you want&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s have a look at the code:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Removing Duplicates from Linked List</title>
      <link>http://abhipandey.com/2014/06/removing-duplicates-from-linked-list/</link>
      <pubDate>Sat, 07 Jun 2014 16:50:12 +0000</pubDate>
      <guid>http://abhipandey.com/2014/06/removing-duplicates-from-linked-list/</guid>
      <description>&lt;p&gt;Duplicates can be removed in many ways:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create a new Linked List containing only unique items&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Iterate through the Linked List and keep removing items that are being repeated&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The internal structure itself for the algo can either be map or set based. When using map the Node itself can be saved thereby making your life easier if you are creating a new Linked List. However sets can be very useful if we are just iterating through the Linked List and simply deleting items that are being repetetive. This is also a great spacesaver. Hence we decided to go down this path.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deleting a Node from Singly Linked List</title>
      <link>http://abhipandey.com/2014/06/deleting-a-node-from-singly-linked-list/</link>
      <pubDate>Sat, 07 Jun 2014 10:49:17 +0000</pubDate>
      <guid>http://abhipandey.com/2014/06/deleting-a-node-from-singly-linked-list/</guid>
      <description>&lt;p&gt;Deleting a Node from Singly Linked List is rather straight forward.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;You have to know the head first of all&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Start by checking the head if that&amp;rsquo;s the one you are looking for&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Keep moving forward and checking - always check for null pointers everywhere&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Before we talk about the code, let&amp;rsquo;s see how Linked List is setup.&lt;/p&gt;&#xA;&lt;script src=&#34;https://gist.github.com/33be440bf1012773b7e1/.js&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;Now, below is the code for it&amp;hellip;.&lt;/p&gt;&#xA;&lt;script src=&#34;https://gist.github.com/bf9dbb193b4ff84ba3af/.js&#34;&gt;&lt;/script&gt;&#xA;&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;&#xA;&lt;p&gt;As usual the code is available &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
