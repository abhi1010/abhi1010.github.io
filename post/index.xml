<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Coders Digest</title>
    <link>http://abhi1010.github.io/post/</link>
    <description>Recent content in Posts on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Sep 2015 13:30:10 +0800</lastBuildDate>
    <atom:link href="http://abhi1010.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Automated Git Mirror With GitHub or Gitlab or Bitbucket</title>
      <link>http://abhi1010.github.io/2015/09/automated-git-mirror-with-github-or-gitlab-or-bitbucket/</link>
      <pubDate>Sun, 27 Sep 2015 13:30:10 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/09/automated-git-mirror-with-github-or-gitlab-or-bitbucket/</guid>
      <description>

&lt;h1 id=&#34;experience-with-gitlab-ci:e8d2b63c4e2d32c203d45ddfe7306ca8&#34;&gt;Experience with Gitlab CI&lt;/h1&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhi1010.github.io/images/git_mirror_with_gitlab__ci.png&#34; alt=&#34;Git Mirror from Gitlab to Bitbucket using Gitlab CI&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Git Mirror from Gitlab to Bitbucket using Gitlab CI
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Had to move from &lt;code&gt;BitBucket&lt;/code&gt; to &lt;code&gt;Gitlab&lt;/code&gt; which is really great, btw. However, there was one tiny issue here - &lt;code&gt;Gitlab&lt;/code&gt; was not supported by &lt;code&gt;Shippable&lt;/code&gt;.
As you may know already &lt;code&gt;Shippable&lt;/code&gt; is a hosted cloud platform that provides hosted continuous integration.
We use it in our current setup to do a full testing and deployment onto &lt;code&gt;AWS Elastic Beanstalk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we were moving to &lt;code&gt;Gitlab&lt;/code&gt; I wanted to continue using &lt;code&gt;Shippable&lt;/code&gt; for our prod deployments. &lt;code&gt;Shippable&lt;/code&gt; only supports &lt;code&gt;Github&lt;/code&gt; or &lt;code&gt;Bitbucket&lt;/code&gt; and therein lies the problem.
&lt;code&gt;Gitlab&lt;/code&gt; did not work with &lt;code&gt;Circl CI&lt;/code&gt; or &lt;code&gt;Travis CI&lt;/code&gt; or &lt;code&gt;Shippable&lt;/code&gt; or &lt;code&gt;Wercker&lt;/code&gt; so I tried using &lt;code&gt;Gitlab CI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, there were some issues with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runs the tasks as standalone but are not part of a &lt;code&gt;Docker&lt;/code&gt; process

&lt;ul&gt;
&lt;li&gt;This means &lt;code&gt;Gitlab CI&lt;/code&gt; does not work similar to &lt;code&gt;Circl CI&lt;/code&gt; or &lt;code&gt;Travis CI&lt;/code&gt; or &lt;code&gt;Shippable&lt;/code&gt; or &lt;code&gt;Wercker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sometimes CI takes long to be triggered even though it registers you to be running right after your commit&lt;/li&gt;
&lt;li&gt;The terms are a bit different compared to the other cloud based continuous integration sites

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Gitlab CI&lt;/code&gt; supposedly tries to improve upon other tools but in the process ensures that you need to learn CI again if you want to use them&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried using the same yaml was &lt;code&gt;Shippable&lt;/code&gt; but it was just not working with too many errors being reported and not to mention, having to wait for an hour during the worst period to see results.
&lt;code&gt;Shippable&lt;/code&gt; on the other hand, would hand over the console and results within 5 minutes of my commits. Decided to ditch &lt;code&gt;Gitlab CI&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;using-git-mirror:e8d2b63c4e2d32c203d45ddfe7306ca8&#34;&gt;Using Git Mirror&lt;/h1&gt;

&lt;p&gt;Since &lt;code&gt;Gitlab CI&lt;/code&gt; was clearing not working I decided to continue using &lt;code&gt;Shippable&lt;/code&gt;. The only issue was, code had to exist in &lt;code&gt;Bitbucket&lt;/code&gt;.
 For that, I needed a git mirror from &lt;code&gt;Gitlab&lt;/code&gt; to &lt;code&gt;Bitbucket&lt;/code&gt;. Looking into docs I found this link - &lt;a href=&#34;http://docs.shippable.com/using_gitlab/&#34;&gt;http://docs.shippable.com/using_gitlab/&lt;/a&gt;.
 Other options mentioned setting up configs to add a mirror. For example, look here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/21551929/how-to-make-a-github-mirror-to-bitbucket&#34;&gt;http://stackoverflow.com/questions/21551929/how-to-make-a-github-mirror-to-bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git-mirror-sync/git-mirror-sync&#34;&gt;git mirror sync as a service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22906917/how-to-move-git-repository-with-all-branches-from-bitbucket-to-github&#34;&gt;http://stackoverflow.com/questions/22906917/how-to-move-git-repository-with-all-branches-from-bitbucket-to-github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had a major problem with all the options - every developer had to set it up for this to work on every commit.&lt;/p&gt;

&lt;p&gt;I looked into webhooks and triggers on &lt;code&gt;Gitlab&lt;/code&gt; but webhooks would have old code (unless I updated the code manually before loading).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, the only way I saw fit to fix this issue was the &lt;code&gt;Gitlab CI&lt;/code&gt; itself.&lt;/strong&gt; I set up a git push as a one-step CI on &lt;code&gt;Gitlab&lt;/code&gt; itself.
 This would do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A commit on &lt;code&gt;Gitlab&lt;/code&gt; leads to CI enabling this &lt;code&gt;git push --mirror&lt;/code&gt; through the file &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When the commit is mirrored on &lt;code&gt;Bitbucket&lt;/code&gt;, the webhook there is registered with &lt;code&gt;Shippable&lt;/code&gt; which triggers the actual deployment through &lt;code&gt;shippable.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In a way &lt;code&gt;Shippable&lt;/code&gt; doesn&amp;rsquo;t need to know anything about &lt;code&gt;Gitlab&lt;/code&gt; which is great&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s my &lt;strong&gt;&lt;em&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;stages&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deploy&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;Git MIRROR&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;stage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deploy&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;git push --mirror https://BITBUCKET_USERNAME:BITBUCKET_PASSWORD@bitbucket.org/group/repo.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Remember to use variables in &lt;code&gt;Gitlab CI&lt;/code&gt; to set up your bitbucket username and password.
  &lt;strong&gt;This had to be done&lt;/strong&gt; because you can&amp;rsquo;t have any ssh key from &lt;code&gt;Gitlab&lt;/code&gt; to add it to &lt;code&gt;Bitbucket&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git LOC Stats by Time Range</title>
      <link>http://abhi1010.github.io/2015/09/git-loc-stats-by-time-range/</link>
      <pubDate>Thu, 17 Sep 2015 11:06:06 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/09/git-loc-stats-by-time-range/</guid>
      <description>&lt;p&gt;Recently had an interest in seeing how many LOC were committed to the code base over a particular period of
time. After some tinkering around, mainly to find out the correct format for time ranges, decided to use the following bash script for finding coding stats.
Following sample is to find out lines added or removed during the year 2014.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;$ &lt;/span&gt;git log --after&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;2014-1-1&amp;quot;&lt;/span&gt; --before&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;2014-12-31&amp;quot;&lt;/span&gt; --pretty&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;tformat: --numstat 
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;{ if ( $2 != 0 &amp;amp;&amp;amp; $1 != 0 ) print $0 }&amp;#39;&lt;/span&gt; 
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt; gawk &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &amp;quot;Added lines: %s Removed lines: %s Total # of lines: %s\n&amp;quot;, add, subs, loc }&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Added lines: 327505 Removed lines: 243860 Total # of lines: 83645
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will notice in the second line that I am doing the following:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt; if ( $2 != 0 &amp;amp;&amp;amp; $1 != 0 ) &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is simply to discard off any commit numbers that were pure addition or deletion (with no corresponding delete or add in the same commit).
It may also remove some numbers that were actually valid commits but mostly it is to protect ourselves against any library or API that we may have added or replaced during that time period.&lt;/p&gt;

&lt;p&gt;For time range, you may even use something like &lt;code&gt;--since=&amp;quot;1 year ago&amp;quot;&lt;/code&gt; and that will also yield similar results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using External Tools with Git Diff</title>
      <link>http://abhi1010.github.io/2015/09/using-external-tools-with-git-diff/</link>
      <pubDate>Thu, 10 Sep 2015 00:18:24 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/09/using-external-tools-with-git-diff/</guid>
      <description>&lt;p&gt;If you want to view what has changed since one commit to another, it is quite easy to view the diff.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git diff 5fad06c..0a504fa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will get something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;diff --git a/modules/file_1.erb b/modules/file_1.erb&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;index 0538da0..6621d93 100644&lt;/span&gt;
&lt;span style=&#34;color: #a40000&#34;&gt;--- a/modules/file_1.erb&lt;/span&gt;
&lt;span style=&#34;color: #00A000&#34;&gt;+++ b/modules/file_1.erb&lt;/span&gt;
&lt;span style=&#34;color: #800080; font-weight: bold&#34;&gt;@@ -5,8 +5,8 @@&lt;/span&gt;
 
   // Algo settings
   &amp;quot;Carbo&amp;quot;: {
&lt;span style=&#34;color: #a40000&#34;&gt;-    &amp;quot;active-instrument&amp;quot;: &amp;quot;SGX/NK15&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #a40000&#34;&gt;-    &amp;quot;hedge-instrument&amp;quot;: &amp;quot;SGX/NK16&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #00A000&#34;&gt;+    &amp;quot;active-instrument&amp;quot;: &amp;quot;SGX/NK17&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #00A000&#34;&gt;+    &amp;quot;hedge-instrument&amp;quot;: &amp;quot;SGX/NK18&amp;quot;,&lt;/span&gt;
     &amp;quot;owner-app-id&amp;quot;: &amp;quot;abhi1010&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if you wanted a use an external tool like &lt;code&gt;meld&lt;/code&gt; to view the diff, in a nice beautiful side by side view? You&amp;rsquo;d have to modify your settings to tell that to &lt;code&gt;git&lt;/code&gt;.
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git config --global diff.tool meld
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Finally, then to view the diff:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;git difftool 5fad06c..0a504fa
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elastic Beanstalk Deployment Automation</title>
      <link>http://abhi1010.github.io/2015/09/elastic-beanstalk-deployment-automation/</link>
      <pubDate>Fri, 04 Sep 2015 00:17:10 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/09/elastic-beanstalk-deployment-automation/</guid>
      <description>

&lt;p&gt;We are going to talk about a setup where &lt;strong&gt;all you need to do it &lt;em&gt;commit&lt;/em&gt; your code and all the rest of the steps from unit tests to deployment can be taken care of by some externally hosted cloud platform that provides continuous integration.&lt;/strong&gt;
  In my case, it is going to be &lt;code&gt;Shippable&lt;/code&gt; that I am using as a sample but you can use almost anything like &lt;code&gt;TravisCI&lt;/code&gt; or &lt;code&gt;codeship&lt;/code&gt;, for example.&lt;/p&gt;

&lt;h1 id=&#34;setup:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;Here is the setup we will be looking at:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhi1010.github.io/images/elastic-beanstalk-deployment-automation-arch.png&#34; alt=&#34;Architecture&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Architecture
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;shippable-for-commits:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Shippable for commits&lt;/h1&gt;

&lt;p&gt;We will use &lt;code&gt;shippable&lt;/code&gt; for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unit Tests&lt;/li&gt;
&lt;li&gt;Regression Tests&lt;/li&gt;
&lt;li&gt;Localized DB Tests&lt;/li&gt;
&lt;li&gt;Tagging of the source code if the commit passes all tests&lt;/li&gt;
&lt;li&gt;Deployment of the source code on &lt;code&gt;beanstalk&lt;/code&gt; running &lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Login onto &lt;code&gt;shippable&lt;/code&gt; and setup your project to be built. It uses webhooks with your repository like &lt;code&gt;GitHub&lt;/code&gt; or &lt;code&gt;shippable&lt;/code&gt; which are called on every commit.
You can create a &lt;code&gt;shippable.yml&lt;/code&gt; file in your project which will be called on every commit. If you have used &lt;code&gt;docker&lt;/code&gt; before, it might look familiar because they invoke a &lt;code&gt;docker&lt;/code&gt; script to run the script within &lt;code&gt;shippable.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is one of my sample files from the project that powers this blog:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;language: python

install:
  - pip install Pygments 

before_script:
  - git config --global push.default matching
  - mkdir -p themes
  - git clone git@github.com:abhi1010/abhi1010.github.io.git
  - &lt;span style=&#34;color: #204a87&#34;&gt;cd &lt;/span&gt;themes
  - git clone https://github.com/abhi1010/hyde-a.git
  - &lt;span style=&#34;color: #204a87&#34;&gt;cd&lt;/span&gt; ../

script:
  - hugo -d abhi1010.github.io/

after_success:
  - &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;`&lt;/span&gt;
  - &lt;span style=&#34;color: #204a87&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;NOW_HOUR&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;$(&lt;/span&gt;date +%d-%b-%H_%M&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;)&lt;/span&gt; 
  - git config --global user.email &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;abhi.pandey@gmail.com&amp;quot;&lt;/span&gt;
  - git config --global user.name &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;abhi1010&amp;quot;&lt;/span&gt;
  - git config --get remote.origin.url
  - git remote &lt;span style=&#34;color: #204a87&#34;&gt;set&lt;/span&gt;-url origin git@github.com:abhi1010.github.io.git
  - &lt;span style=&#34;color: #204a87&#34;&gt;cd &lt;/span&gt;abhi1010.github.io
  - git status -s
  - &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;a\n*\nq\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;git add -i
  - git commit -am &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;Automated build from Shippable - &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;$NOW_HOUR&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push


notifications:
     email:
         recipients:
             - abhi@boun.cr
         on_success: change
         on_failure: always

cache: &lt;span style=&#34;color: #204a87&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script does the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;python&lt;/code&gt; as the default language for the scripts to use&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;Pygments&lt;/code&gt; using &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;My blog is done using three repos - so it does a &lt;em&gt;git clone&lt;/em&gt; for each&lt;/li&gt;
&lt;li&gt;Calls on hugo to create the static site&lt;/li&gt;
&lt;li&gt;Commits the changes made in static content to &lt;code&gt;GitHub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once it works, you will see the following on &lt;code&gt;shippable&lt;/code&gt; site:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://abhi1010.github.io/images/elastic-beanstalk-deployment-automation-2.png&#34; alt=&#34;Shippable Build Status&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Shippable Build Status
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;unit-tests:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Unit Tests&lt;/h2&gt;

&lt;p&gt;You may also want to set up unit tests and regression tests as part of your &lt;em&gt;scripts&lt;/em&gt;
Just do the following then&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&lt;/span&gt;  &lt;span style=&#34;color: #000000&#34;&gt;py.test-3.4 tests/test.py --maxfail=3 -s --full-trace --tb=long --junitxml=../shippable/testresults/pytests.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;git-tagging:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Git Tagging&lt;/h2&gt;

&lt;p&gt;If the tests pass in &lt;em&gt;scripts&lt;/em&gt; only then does &lt;code&gt;shippable&lt;/code&gt; go to &lt;strong&gt;after_success&lt;/strong&gt; section.
Over there, you might want to tag your source code, so that &lt;code&gt;docker&lt;/code&gt; will only pull the tagged and approved commits from &lt;code&gt;shippable&lt;/code&gt;, not every commit - which is very important.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how to do that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;after_success:
  - git tag -f recon_prod master
  - git push -f --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;deployment:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Deployment&lt;/h1&gt;

&lt;p&gt;Once you have approved your code commit, it is time to deploy it to &lt;code&gt;docker&lt;/code&gt; on &lt;code&gt;beanstalk&lt;/code&gt;.
I like to keep deployment scripts in another bash script, so that deployment can be done in various other ways as well, if needed.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;after_success:
  - main/scripts/deploy.sh 
  - &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;CODE DEPLOYED&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, you may choose to have the &amp;ldquo;deployment&amp;rdquo; script from another project, if you wish. It allows you to separately maintain all the moving parts.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;rm -rf &lt;span style=&#34;color: #204a87&#34;&gt;cd &lt;/span&gt;eb-reconwise
&lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;Deploying New Dockers&amp;#39;&lt;/span&gt;
git clone https://github.com/abhi1010/deplyment_project.git
&lt;span style=&#34;color: #204a87&#34;&gt;cd &lt;/span&gt;deplyment_project/
chmod +x deploy.sh
eb use beanstalk_env_name
./deploy.sh
&lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;Deployment Complete&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;dockerfile:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;Now first what we need is setting up &lt;code&gt;docker&lt;/code&gt; on beanstalk.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  FROM abhi1010/base_docker
  MAINTAINER abhi1010 &amp;lt;codersdigest@gmail.com&amp;gt;
  
  ENV DEBIAN_FRONTEND noninteractive
  
  ENV WS &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;/ws&amp;#39;&lt;/span&gt;
  ENV CURR_HOME &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;/root&amp;#39;&lt;/span&gt;
  WORKDIR &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;
  
  RUN git clone https://github.com/abhi1010/dockerprj.git &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/ve_envs/rwv2/bin/activate &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/prj/rw/manage.py collectstatic --noinput
  
  COPY supervisor-app.conf &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/
  
  RUN &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
      cp &lt;span style=&#34;color: #000000&#34;&gt;$WS&lt;/span&gt;/supervisor-app.conf /etc/supervisor/supervisord.conf &lt;span style=&#34;color: #4e9a06&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chown -R www-data:www-data /var/lib/nginx

  VOLUME &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/shared/&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/etc/nginx/sites-enabled&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/log/nginx&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/ws/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
    
  EXPOSE 80
  CMD &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;supervisord&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;-n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This does the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run a base &lt;code&gt;docker&lt;/code&gt; from a custom image - where all apps and project requirements have already been installed and configured. It helps me save a lot of time during deployments.&lt;/li&gt;
&lt;li&gt;Download the source code using &lt;code&gt;RUN&lt;/code&gt; - which I update using another method.

&lt;ul&gt;
&lt;li&gt;You can view detail on this &lt;a href=&#34;http://abhi1010.github.io/2015/09/updating-django-source-with-docker-deployments/&#34;&gt;method here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;supervisord&lt;/code&gt; config as well&lt;/li&gt;
&lt;li&gt;Set the right user rights for &lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setup folders to be shared using &lt;code&gt;VOLUME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Expose port 80 so that this &lt;code&gt;docker&lt;/code&gt; container can be used as a web container&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;cmd&lt;/code&gt; so that it allows &lt;code&gt;supervisord&lt;/code&gt; to be used for running the container&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;beanstalk-configuration:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Beanstalk Configuration&lt;/h2&gt;

&lt;p&gt;Once we have the &lt;code&gt;Dockerfile&lt;/code&gt; ready, we need to set up the configuration for &lt;code&gt;beanstalk&lt;/code&gt; so that during deployment, other steps can be taken care of as well. Some of the things to keep in mind in &lt;code&gt;beanstalk&lt;/code&gt; setup are:&lt;/p&gt;

&lt;h3 id=&#34;tips:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Tips&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All &lt;code&gt;beanstalk&lt;/code&gt; configuration has be kept in a folder called &lt;strong&gt;&lt;code&gt;.ebextension&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beanstalk ec2&lt;/code&gt; instance maintains a folder internally to run the scripts while setting up &lt;code&gt;docker&lt;/code&gt; for you so that the instance can be ready for you

&lt;ul&gt;
&lt;li&gt;It is totally possible to &lt;em&gt;plug&lt;/em&gt; your own scripts into &lt;code&gt;beanstalk&lt;/code&gt; initialization setup so that you can &lt;em&gt;program&lt;/em&gt; a custom &lt;code&gt;EC2&lt;/code&gt; instance for yourself&lt;/li&gt;
&lt;li&gt;Folder to place your scripts are &lt;code&gt;/opt/elasticbeanstalk/hooks/appdeploy/post&lt;/code&gt; and &lt;code&gt;/opt/elasticbeanstalk/hooks/appdeploy/pre&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scripts placed in the folders are read in alphabetical order&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can increase the timeout of your &lt;code&gt;docker&lt;/code&gt; initialization setup if it takes too long due to multiple steps
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;option_settings&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;aws&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;elasticbeanstalk&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;command&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;option_name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Timeout&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1800&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;user-accounts:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;User Accounts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can also add any user account if you&amp;rsquo;d like pragmatically and make sure they are &lt;em&gt;always&lt;/em&gt; part of the &lt;code&gt;EC2&lt;/code&gt; instance that you are creating

&lt;ul&gt;
&lt;li&gt;Create a file called &lt;code&gt;00001.ftp.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pre&lt;/code&gt; folder to setup accounts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;files:
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/opt/elasticbeanstalk/hooks/appdeploy/pre/0001_create_users.sh&amp;quot;&lt;/span&gt;:
    mode: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;000755&amp;quot;&lt;/span&gt; 
    owner: root
    group: root
    content: &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;
      &lt;span style=&#34;color: #204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;About to Add user gh-user&amp;#39;&lt;/span&gt;
      adduser gh-user
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;mkdir ~/.ssh&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;chmod 700 ~/.ssh&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;touch ~/.ssh/authorized_keys&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;chmod 600 ~/.ssh/authorized_keys&amp;#39;&lt;/span&gt;
      runuser -l gh-user -c &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;#39;echo &amp;quot;ssh-rsa r4CBI2cWQohEwBkGw9CcW0vWfnlAcKkrCnsJvwe/+kG5w9J8gJdnNQ8BFB+q+kQ6fWl+1kw7b+8jah5q0nNpOzLbed+Rzse1BoOIjsSXqN/L7AW8y61PVBULcVAVBKCrVy0U5zifv/e6a5+dsUD3WLiD3yXTgPDcZoqQqPYkurCx5ZzxLylKfXfL37k7sz00e+Tu/Y+J9xXdI9j3G5bU9rmIe4SH4mK4BCMRQ6zCHqAzAXZtnmN5U1XR3XrfMtuDLvVgcOlEpXIMl9q2kco0ZCdMkYoSzf3Yj&amp;quot; &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;pre-installing-packages:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Pre-installing Packages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You should also install any package that you&amp;rsquo;d like on all &lt;code&gt;EC2&lt;/code&gt; instances&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;files:
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/opt/elasticbeanstalk/hooks/appdeploy/pre/0003_packages.sh&amp;quot;&lt;/span&gt;:
    mode: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;000755&amp;quot;&lt;/span&gt; 
    owner: root
    group: root
    content: &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#!/usr/bin/env bash &lt;/span&gt;
      yum install -y git
     
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;sharing-volumes-between-docker-and-ec2:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Sharing volumes between &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;EC2&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that folder sharing is enabled between &lt;code&gt;EC2&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt; instances

&lt;ul&gt;
&lt;li&gt;This goes into file &lt;code&gt;Dockerrun.aws.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;AWSEBDockerrunVersion&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Volumes&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;HostDirectory&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/shared&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;ContainerDirectory&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/shared&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;,
  &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Ports&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;ContainerPort&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;80&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;,
   &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Logging&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/log/&amp;quot;&lt;/span&gt;
 &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;folder-and-files-structure:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;Folder and files structure&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Finally, make sure that your folder files are setup as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt; tree -a 
.
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- .ebextensions
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- 0000_users.config  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# setup extra users&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- 0002_packages.config  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# install external packages&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- 0004_bash.config  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# I like to manage all &lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- .elasticbeanstalk
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- config.yml  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# AWS connection details&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- .gitignore 
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- Dockerfile  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# Docker instance&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- Dockerrun.aws.json   &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# folder sharing&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;-- updater.sh  &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# script to update any code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;elasticbeanstalk-folder-for-aws-configs:8d5fa5afd262889ee9af2f0243a94c6d&#34;&gt;&lt;code&gt;.elasticbeanstalk&lt;/code&gt; folder for &lt;code&gt;aws&lt;/code&gt; configs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You might be wondering what&amp;rsquo;s &lt;code&gt;.elasticbeanstalk&lt;/code&gt; folder. It is the folder that&amp;rsquo;s responsible for taking your &lt;code&gt;AWS&lt;/code&gt; secret key and access id for doing the actual deployment. If you don&amp;rsquo;t set it up, AWS will ask you every time.

&lt;ul&gt;
&lt;li&gt;For setting it up, you just need to call &lt;code&gt;eb config&lt;/code&gt; one time, it creates the folder for you with all the details, including connection details. You can then make it part of your &lt;code&gt;git&lt;/code&gt; commits&lt;/li&gt;
&lt;li&gt;Make sure it is secure&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that&amp;rsquo;s it! Once you commit your code, &lt;code&gt;shippable&lt;/code&gt; will run the tests, tag your code and finally download this &lt;em&gt;deployment&lt;/em&gt; project and deploy it to &lt;code&gt;beanstalk&lt;/code&gt; through &lt;code&gt;docker&lt;/code&gt; containers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nginx Upload limits on Beanstalk Docker</title>
      <link>http://abhi1010.github.io/2015/09/nginx-upload-limits-on-beanstalk-docker/</link>
      <pubDate>Fri, 04 Sep 2015 00:14:35 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/09/nginx-upload-limits-on-beanstalk-docker/</guid>
      <description>&lt;p&gt;If I am not wrong, &lt;code&gt;nginx&lt;/code&gt; only allows you to upload up till max 2Mb of data by default. If you are doing a &lt;code&gt;docker&lt;/code&gt; deployment on &lt;code&gt;beanstalk&lt;/code&gt; you may to remember to change that not once but twice!&lt;/p&gt;

&lt;p&gt;As you may know already, &lt;code&gt;beanstalk&lt;/code&gt; creates an &lt;code&gt;EC2&lt;/code&gt; instance to manage the &lt;code&gt;docker&lt;/code&gt; environment.&lt;br /&gt;
Since &lt;code&gt;EC2&lt;/code&gt; needs to manage the &lt;code&gt;docker&lt;/code&gt; environment and serve the web interface as well, it does so by having another &lt;code&gt;nginx&lt;/code&gt; instance to serve the &lt;code&gt;nginx&lt;/code&gt; within &lt;code&gt;docker&lt;/code&gt;.
Hence, if you had to modify the &lt;code&gt;nginx&lt;/code&gt; settings to allow bigger uploads, &lt;strong&gt;you&amp;rsquo;d have to modify the settings for &lt;code&gt;nginx&lt;/code&gt; on both - &lt;code&gt;docker&lt;/code&gt; as well as &lt;code&gt;EC2&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# max upload size&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;client_max_body_size&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;   &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# adjust to your liking&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, if you don&amp;rsquo;t want to have any limit at all for uploads, then just change the &lt;code&gt;client_max_body_size&lt;/code&gt; to 0.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# max upload size&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;client_max_body_size&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Updating Django Source with Docker Deployments</title>
      <link>http://abhi1010.github.io/2015/09/updating-django-source-with-docker-deployments/</link>
      <pubDate>Fri, 04 Sep 2015 00:11:51 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/09/updating-django-source-with-docker-deployments/</guid>
      <description>

&lt;p&gt;While deploying docker multiple times, you may not want to copy over your &lt;code&gt;Django&lt;/code&gt; source code every time you do a deployment.&lt;/p&gt;

&lt;h1 id=&#34;setting-up-supervisord:8ef139736ad377184214844940ced19b&#34;&gt;Setting up &lt;code&gt;supervisord&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;Luckily there is an easy way to manage this. Since you are working with &lt;code&gt;Django&lt;/code&gt;, there is a good chance that you are also managing the processes (like &lt;code&gt;uwsgi&lt;/code&gt;) with &lt;code&gt;supervisord&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are some of the steps that you can take with &lt;code&gt;supervisord&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a new process in &lt;code&gt;supervisord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Do not allow it to &lt;em&gt;&lt;code&gt;autorestart&lt;/code&gt;&lt;/em&gt; since it will be a one-shot process&lt;/li&gt;
&lt;li&gt;Call another script in any format to update the source code

&lt;ul&gt;
&lt;li&gt;As an example, I use &lt;code&gt;bash&lt;/code&gt; to update my source code through &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a sample code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;program:source-updater&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;redirect_stderr&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #204a87&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;stdout_logfile&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /shared/source_code_updater.log
    &lt;span style=&#34;color: #000000&#34;&gt;directory&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/
    &lt;span style=&#34;color: #204a87&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/source_code_updater.sh
    &lt;span style=&#34;color: #000000&#34;&gt;autorestart&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;False
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;updating-the-source-code:8ef139736ad377184214844940ced19b&#34;&gt;Updating the source code&lt;/h1&gt;

&lt;p&gt;Few things are important to note in a &lt;code&gt;docker&lt;/code&gt; deployment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not every commit needs to be deployed&lt;/li&gt;
&lt;li&gt;Filter your commits to only allow &lt;strong&gt;&lt;em&gt;deployable&lt;/em&gt;&lt;/strong&gt; code to be updated on &lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Include regression, unit and system tests to be part of your build process&lt;/li&gt;
&lt;li&gt;Once everything has been confirmed to be working, tag your code so that you know it is worthy of going to docker&lt;/li&gt;
&lt;li&gt;Another way would be to manage this process through branches and merge only if everything passes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt; deployments would build off this merged branch or tagged version&lt;/li&gt;
&lt;li&gt;This way even if you have made 10 commits while fixing a bug and are still in the process of fixing it, you know it won&amp;rsquo;t go to &lt;code&gt;docker&lt;/code&gt; deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that idea, do a checkout and update the source code according to specific tag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    git checkout -f tags/your_tag_name
    git pull origin tags/your_tag_name
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;telling-uwsgi-about-the-updated-source-code:8ef139736ad377184214844940ced19b&#34;&gt;Telling &lt;code&gt;uwsgi&lt;/code&gt; about the updated source code&lt;/h1&gt;

&lt;p&gt;Once you have updated your source code, you need to re-load the project onto &lt;code&gt;uwsgi&lt;/code&gt; so that &lt;code&gt;nginx&lt;/code&gt; or &lt;code&gt;apache&lt;/code&gt; can pick it up.
The simplest way to achieve it using the config parameter of &lt;code&gt;uwsgi&lt;/code&gt;: &lt;code&gt;--touch-reload&lt;/code&gt;. It will &lt;em&gt;reload uWSGI if the specified file is modified/touched&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just remember to setup &lt;code&gt;supervisord&lt;/code&gt; in your &lt;code&gt;Dockerfile&lt;/code&gt; with this config parameter.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;program:app-uwsgi&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;redirect_stderr&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;stdout_logfile&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /var/shared/_uwsgi.log
&lt;span style=&#34;color: #204a87&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/ve_envs/rwv2/bin/uwsgi --touch-reload&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;/ws/wsgi.ini --ini /ws/wsgi.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can choose any file. I choose &lt;code&gt;uwsgi.ini&lt;/code&gt; because the contents never really need to change in it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple Virtual Environments in Docker</title>
      <link>http://abhi1010.github.io/2015/09/multiple-virtual-environments-in-docker/</link>
      <pubDate>Thu, 03 Sep 2015 22:33:33 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/09/multiple-virtual-environments-in-docker/</guid>
      <description>&lt;p&gt;It may seem like a daunting task to have multiple python projects running in their own virtual environments in docker as you want to manage the running of the tasks from a single source - let&amp;rsquo;s say &lt;code&gt;supervisord&lt;/code&gt;.
However, all that is required here is to know that python automatically picks up the location of the virtual environments if you provide full path to the virtual environment&amp;rsquo;s python.&lt;/p&gt;

&lt;p&gt;For example, in my docker environment, I have virtual environment install at the following location:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ws/ve_envs/rwv1/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To enable a project with this virtual environment, I can run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ws/ve_envs/rwv1/bin/python3.4 PYTHON_PROJECT_FILE_TO_RUN.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, other projects can be set up in the same way.&lt;/p&gt;

&lt;p&gt;For example, for running &lt;code&gt;uwsgi&lt;/code&gt; I provide the full path for python as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;program:appName&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;stdout_logfile&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /var/shared/_uwsgi.log
&lt;span style=&#34;color: #204a87&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; /ws/ve_envs/project/bin/uwsgi --touch-reload&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;/ws/wsgi.ini --ini /ws/wsgi.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might want to read about &lt;code&gt;--touch-reload&lt;/code&gt; in my &lt;a href=&#34;http://abhi1010.github.io/2015/09/updating-django-source-with-docker-deployments/&#34;&gt;other post.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sharing folders on Beanstalk Docker</title>
      <link>http://abhi1010.github.io/2015/08/sharing-folders-on-beanstalk-docker/</link>
      <pubDate>Fri, 14 Aug 2015 00:19:51 +0800</pubDate>
      
      <guid>http://abhi1010.github.io/2015/08/sharing-folders-on-beanstalk-docker/</guid>
      <description>&lt;p&gt;It is very easy to setup volume sharing in &lt;code&gt;docker&lt;/code&gt;. You ideally want the following folders to be shared when a new &lt;code&gt;docker&lt;/code&gt; is initialized for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log&lt;/code&gt; so that you can keep track of logs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt; specific folders because you will have two instances of &lt;code&gt;nginx&lt;/code&gt; running - one on &lt;code&gt;docker&lt;/code&gt; and another on &lt;code&gt;EC2&lt;/code&gt;. This allows you to share logs

&lt;ul&gt;
&lt;li&gt;Also read &lt;a href=&#34;http://abhi1010.github.io/2015/09/nginx-upload-limits-on-beanstalk-docker/&#34;&gt;this post&lt;/a&gt; for related info&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;your personal workspace or anything that you&amp;rsquo;d like to share&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s how you&amp;rsquo;d do it. The keyword is &lt;code&gt;VOLUME&lt;/code&gt;&amp;hellip; in your &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;VOLUME&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt; \
    &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/shared/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; \ 
    &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/etc/nginx/sites-enabled&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; \ 
    &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/var/log/nginx&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; \
    &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;/ws/&amp;quot;&lt;/span&gt; \
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Docker Container cleanup on Elastic Beanstalk</title>
      <link>http://abhi1010.github.io/2015/08/docker-container-cleanup-on-elastic-beanstalk/</link>
      <pubDate>Fri, 07 Aug 2015 14:59:18 -0400</pubDate>
      
      <guid>http://abhi1010.github.io/2015/08/docker-container-cleanup-on-elastic-beanstalk/</guid>
      <description>

&lt;p&gt;Sometimes you may notice that old containers are not cleaned up from Beanstalk environment. This may be due to your container still running as a ghost on the background. One way to find out about this is to quickly look into your
&lt;code&gt;/var/lib/docker/vfs/dir&lt;/code&gt; directory whether it has too many folders.&lt;/p&gt;

&lt;p&gt;Next, find out what container processes you have going on.
&lt;code&gt;[root@ip dir]# docker ps -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You might see something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    CONTAINER ID        IMAGE                              COMMAND             CREATED             STATUS              PORTS               NAMES&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    1611e5ebe2c0        aws_beanstalk/staging-app:latest   &amp;quot;supervisord -n&amp;quot;    About an hour ago                                           boring_galileo&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    e59d0dd8bba1        aws_beanstalk/staging-app:latest   &amp;quot;supervisord -n&amp;quot;    About an hour ago                                           desperate_yalow&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    3844d0e18c47        aws_beanstalk/staging-app:latest   &amp;quot;supervisord -n&amp;quot;    2 hours ago         Up 8 minutes        80/tcp              pensive_jang&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ideally, we want to &amp;ldquo;forcibly remove&amp;rdquo; all images (and hence the folders from &lt;code&gt;/var/lib/docker/vfs/dir&lt;/code&gt; directory) that are not in use anymore.
Just run the following to test whether it works:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    docker rmi -f `docker images -aq`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might run into trouble where docker says that all those images already have a container that is running them. This means those container are orphaned but not killed as we thought them to be. Let&amp;rsquo;s remove the shared volumes if any, for each one of them.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    docker rm -fv `docker ps -aq` &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kill the container&lt;/li&gt;
&lt;li&gt;unlink the volumes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see a lot more space now on your beanstalk instance.
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    [root@ip dir]# df -h&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    Filesystem      Size  Used Avail Use% Mounted on&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    /dev/xvda1      7.8G  1.8G  5.9G  24% /&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    devtmpfs        490M   96K  490M   1% /dev&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    tmpfs           499M     0  499M   0% /dev/shm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;last-resort:57533ab22b2cfb33b4a75f9cd178e950&#34;&gt;Last Resort&lt;/h1&gt;

&lt;p&gt;If you feel that all this is not working, then you can try one of the scripts provided by &lt;code&gt;docker&lt;/code&gt; itself at
&lt;a href=&#34;https://github.com/docker/docker/blob/master/contrib/nuke-graph-directory.sh&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will delete the folders under &lt;code&gt;/var/lib/docker&lt;/code&gt; and try to do it responsibly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Partition Linked List around a Value X</title>
      <link>http://abhi1010.github.io/2014/06/partition-linked-list-around-a-value-x/</link>
      <pubDate>Mon, 09 Jun 2014 15:02:07 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/2014/06/partition-linked-list-around-a-value-x/</guid>
      <description>

&lt;p&gt;How do you partition a list around a value x, such that all nodes less than x come before all nodes greater than or equal to x?&lt;/p&gt;

&lt;p&gt;Well, there are some solutions possible. The solution, I came up with, is a bit convoluted but let me tell the idea behind it. You want to track the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Two pointers to remember the beginning of the &lt;em&gt;lower&lt;/em&gt; and &lt;em&gt;higher&lt;/em&gt; series each&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One pointer (&lt;em&gt;current&lt;/em&gt;) to iterate through the Linked List&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The list may itself start with higher or lower value compared to the &lt;em&gt;middleValue&lt;/em&gt;. Thus we need to remember the beginning of the lower series (&lt;em&gt;lowerSeries&lt;/em&gt;) as this is what we will send back&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have this out of the way, let&amp;rsquo;s look at the code:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/3ada1d15b5bda319a54c.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;code:8a20b19b0e16e5ac875728276c435d4c&#34;&gt;Code&lt;/h1&gt;

&lt;p&gt;As usual the code is available &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find the Kth to Last Element of a Singly Linked List</title>
      <link>http://abhi1010.github.io/2014/06/find-the-kth-to-last-element-of-a-singly-linked-list/</link>
      <pubDate>Sun, 08 Jun 2014 07:49:47 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/2014/06/find-the-kth-to-last-element-of-a-singly-linked-list/</guid>
      <description>&lt;p&gt;It is possible to a recursive solutions but I will use a simple runner logic. Recursive solutions are usually less optimal.&lt;/p&gt;

&lt;p&gt;Note here that, in our logic K=1 would return the last element in the linked list. Similarly, K=2 would return the second last element.&lt;/p&gt;

&lt;p&gt;The suggested solution here is to use two pointers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One pointer will first travel K items into the list&lt;/li&gt;
&lt;li&gt;Once that is done, both the pointers start travelling together, one item at a time&lt;/li&gt;
&lt;li&gt;They keep travelling until the end of linked list is found&lt;/li&gt;
&lt;li&gt;In that situation, the first pointer is at the end of the list, but the second pointer would have only reached till Kth element - this is what you want&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at the code:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/43e289a9877fb9293680.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;As usual the code is available &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Removing Duplicates from Linked List</title>
      <link>http://abhi1010.github.io/2014/06/removing-duplicates-from-linked-list/</link>
      <pubDate>Sat, 07 Jun 2014 16:50:12 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/2014/06/removing-duplicates-from-linked-list/</guid>
      <description>

&lt;p&gt;Duplicates can be removed in many ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a new Linked List containing only unique items&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Iterate through the Linked List and keep removing items that are being repeated&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The internal structure itself for the algo can either be map or set based. When using map the Node itself can be saved thereby making your life easier if you are creating a new Linked List. However sets can be very useful if we are just iterating through the Linked List and simply deleting items that are being repetetive. This is also a great spacesaver. Hence we decided to go down this path.&lt;/p&gt;

&lt;h1 id=&#34;code:33d170712a3b1643edfc33b9f231740c&#34;&gt;Code&lt;/h1&gt;

&lt;p&gt;As usual the &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;code&lt;/a&gt; is available here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a small sample as to how to do it:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/e2b7117c20d0f591896f.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Deleting a Node from Singly Linked List</title>
      <link>http://abhi1010.github.io/2014/06/deleting-a-node-from-singly-linked-list/</link>
      <pubDate>Sat, 07 Jun 2014 10:49:17 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/2014/06/deleting-a-node-from-singly-linked-list/</guid>
      <description>

&lt;p&gt;Deleting a Node from Singly Linked List is rather straight forward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You have to know the head first of all&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start by checking the head if that&amp;rsquo;s the one you are looking for&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keep moving forward and checking - always check for null pointers everywhere&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we talk about the code, let&amp;rsquo;s see how Linked List is setup.
&amp;lt;!&amp;ndash; more &amp;ndash;&amp;gt;&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/33be440bf1012773b7e1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now, below is the code for it&amp;hellip;.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/bf9dbb193b4ff84ba3af.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;code:ca5ee7b35fae15e9d7ea6b34351195c6&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;As usual the code is available &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usage of typename</title>
      <link>http://abhi1010.github.io/2014/05/usage-of-typename/</link>
      <pubDate>Mon, 26 May 2014 14:19:15 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/2014/05/usage-of-typename/</guid>
      <description>&lt;p&gt;What is wrong with the following code?&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/0bd5e4d910e4d8a7672e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The issue is very simple but hard to notice. If you try to compile this, you will get the following errors:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    main.cpp:24:5: error: need &amp;#39;typename&amp;#39; before &amp;#39;OuterStruct&amp;lt;T2&amp;gt;::InnerStruct&amp;#39; because &amp;#39;OuterStruct&amp;lt;T2&amp;gt;&amp;#39; is a dependent scope&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    OuterStruct&amp;lt;T2&amp;gt;::InnerStruct mUsingInner;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    ^&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    main.cpp: In function &amp;#39;int main(int, char**)&amp;#39;:&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    main.cpp:34:13: error: &amp;#39;struct InnerStruct_Wrapper&amp;lt;int&amp;gt;&amp;#39; has no member named &amp;#39;mUsingInner&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-style: italic&#34;&gt;    wrapper.mUsingInner = innerStrct;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Issue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At least it straight away tells you something is wrong with &lt;code&gt;InnerStruct_Wrapper&lt;/code&gt;. Here&amp;rsquo;s what is happening:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The compiler does not know that mUsingInner in that line is actually a variable of type &amp;ldquo;OuterStruct&lt;T2&gt;::InnerStruct&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;InnerStruct will only be known later when it is being instantiated&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compiler cannot figure out what InnerStruct means here. It could be a type or a member variable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The only way here is to help the compiler by telling it beforehand that is going to be a class or struct type. The way to tell the compiler that something like this is supposed to be a type name is to throw in the keyword &amp;ldquo;typename&amp;rdquo;. The &amp;ldquo;typename&amp;rdquo; keyword has to be used everytime you want to tell the compiler that it should expect a Type in its place.&lt;/p&gt;

&lt;p&gt;One place where this is used quite a lot is when templates have to implement iterators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The full sample code, along with the fix&lt;/em&gt;&lt;/strong&gt; is provided on &lt;a href=&#34;http://coliru.stacked-crooked.com/a/b0ab70c458370048&#34;&gt;Stacked-Crooked&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up your VIM... Your style</title>
      <link>http://abhi1010.github.io/2014/05/setting-up-your-vim...-your-style/</link>
      <pubDate>Mon, 19 May 2014 15:51:51 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/2014/05/setting-up-your-vim...-your-style/</guid>
      <description>&lt;p&gt;Writing code using VIM can be a bit overwhelming but it helps creating a few shortcuts there to make your life easier. Here I will discuss a few.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, it is always a good idea to set up your tabs and spaces&lt;/li&gt;
&lt;li&gt;Set up shortcuts for:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Toggling of Auto-Indent&lt;/code&gt; while pasting source text; very useful in code (&lt;em&gt;F2&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Toggling of Auto-Scroll&lt;/code&gt; of Split windows (&lt;em&gt;F3&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Macro for Folding functions&lt;/code&gt; within the source code (&lt;em&gt;&lt;em&gt;@q&lt;/em&gt;&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Smart case search&lt;/code&gt; - based on whether the input is in caps or not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Toggling of Mouse Usage&lt;/code&gt; in VIM window - to allow quick selection of text (&lt;em&gt;F12&lt;/em&gt; in my provided script)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see the provided script below to have a look.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/6f190c9f3afd42881ef5.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>