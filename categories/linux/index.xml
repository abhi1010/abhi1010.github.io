<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Coders Digest</title>
    <link>http://abhi1010.github.io/categories/linux/</link>
    <description>Recent content in Linux on Coders Digest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Aug 2015 14:59:18 +0000</lastBuildDate>
    <atom:link href="http://abhi1010.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker Container cleanup on Elastic Beanstalk</title>
      <link>http://abhi1010.github.io/post/docker-container-cleanup-on-elastic-beanstalk/</link>
      <pubDate>Fri, 07 Aug 2015 14:59:18 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/docker-container-cleanup-on-elastic-beanstalk/</guid>
      <description>&lt;p&gt;{% comment %}
    These commments will not include inside the source.
{% endcomment %}&lt;/p&gt;

&lt;p&gt;Sometimes you may notice that old containers are not cleaned up from Beanstalk environment. This may be due to your container still running as a ghost on the background. One way to find out about this is to quickly look into your
&lt;code&gt;/var/lib/docker/vfs/dir&lt;/code&gt; directory whether it has too many folders.&lt;/p&gt;

&lt;p&gt;Next, find out what container processes you have going on.
&lt;code&gt;[root@ip dir]# docker ps -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You might see something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    CONTAINER ID        IMAGE                              COMMAND             CREATED             STATUS              PORTS               NAMES
    1611e5ebe2c0        aws_beanstalk/staging-app:latest   &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;supervisord -n&amp;quot;&lt;/span&gt;    About an hour ago                                           boring_galileo
    e59d0dd8bba1        aws_beanstalk/staging-app:latest   &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;supervisord -n&amp;quot;&lt;/span&gt;    About an hour ago                                           desperate_yalow
    3844d0e18c47        aws_beanstalk/staging-app:latest   &lt;span style=&#34;color: #dd2200; background-color: #fff0f0&#34;&gt;&amp;quot;supervisord -n&amp;quot;&lt;/span&gt;    &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;2&lt;/span&gt; hours ago         Up &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;8&lt;/span&gt; minutes        80/tcp              pensive_jang
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ideally, we want to &amp;ldquo;forcibly remove&amp;rdquo; all images (and hence the folders from &lt;code&gt;/var/lib/docker/vfs/dir&lt;/code&gt; directory) that are not in use anymore.
Just run the following to test whether it works:
&lt;code&gt;docker rmi -f&lt;/code&gt;docker images -aq``&lt;/p&gt;

&lt;p&gt;You might run into trouble where docker says that all those images already have a container that is running them. This means those container are orphaned but not killed as we thought them to be. Let&amp;rsquo;s remove the shared volumes if any, for each one of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rm -fv `docker ps -aq` 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kill the container&lt;/li&gt;
&lt;li&gt;unlink the volumes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see a lot more space now on your beanstalk instance.
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    [root@ip dir]&lt;span style=&#34;color: #888888&#34;&gt;# df -h&lt;/span&gt;
    Filesystem      Size  Used Avail Use% Mounted on
    /dev/xvda1      7.8G  1.8G  5.9G  24% /
    devtmpfs        490M   96K  490M   1% /dev
    tmpfs           499M     0  499M   0% /dev/shm
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Partition Linked List around a Value X</title>
      <link>http://abhi1010.github.io/post/partition-linked-list-around-a-value-x-such-that-all-nodes-x/</link>
      <pubDate>Mon, 09 Jun 2014 15:02:07 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/partition-linked-list-around-a-value-x-such-that-all-nodes-x/</guid>
      <description>

&lt;p&gt;How do you partition a list around a value x, such that all nodes less than x come before all nodes greater than or equal to x?&lt;/p&gt;

&lt;p&gt;Well, there are some solutions possible. The solution, I came up with, is a bit convoluted but let me tell the idea behind it. You want to track the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Two pointers to remember the beginning of the &lt;em&gt;lower&lt;/em&gt; and &lt;em&gt;higher&lt;/em&gt; series each&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One pointer (&lt;em&gt;current&lt;/em&gt;) to iterate through the Linked List&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The list may itself start with higher or lower value compared to the &lt;em&gt;middleValue&lt;/em&gt;. Thus we need to remember the beginning of the lower series (&lt;em&gt;lowerSeries&lt;/em&gt;) as this is what we will send back&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have this out of the way, let&amp;rsquo;s look at the code:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/abhi1010/3ada1d15b5bda319a54c&#34;&gt;https://gist.github.com/abhi1010/3ada1d15b5bda319a54c&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;code:8a20b19b0e16e5ac875728276c435d4c&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;As usual the code is available &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find the Kth to Last Element of a Singly Linked List</title>
      <link>http://abhi1010.github.io/post/find-the-kth-to-last-element-of-a-singly-linked-list/</link>
      <pubDate>Sun, 08 Jun 2014 07:49:47 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/find-the-kth-to-last-element-of-a-singly-linked-list/</guid>
      <description>&lt;p&gt;It is possible to a recursive solutions but I will use a simple runner logic. Recursive solutions are usually less optimal.&lt;/p&gt;

&lt;p&gt;Note here that, in our logic K=1 would return the last element in the linked list. Similarly, K=2 would return the second last element.&lt;/p&gt;

&lt;p&gt;The suggested solution here is to use two pointers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One pointer will first travel K items into the list&lt;/li&gt;
&lt;li&gt;Once that is done, both the pointers start travelling together, one item at a time&lt;/li&gt;
&lt;li&gt;They keep travelling until the end of linked list is found&lt;/li&gt;
&lt;li&gt;In that situation, the first pointer is at the end of the list, but the second pointer would have only reached till Kth element - this is what you want&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at the code:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    
Node* &lt;span style=&#34;color: #0066bb; font-weight: bold&#34;&gt;findKthToLastElement&lt;/span&gt; (Node* node, &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;short&lt;/span&gt; k)
{
    Node* secondRunner = node;
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #888888; font-weight: bold&#34;&gt;short&lt;/span&gt; i = &lt;span style=&#34;color: #0000DD; font-weight: bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; k; ++i)
    {
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;if&lt;/span&gt; (secondRunner-&amp;gt;next != &lt;span style=&#34;color: #003388&#34;&gt;NULL&lt;/span&gt;)
            secondRunner = secondRunner-&amp;gt;next;
        &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;else&lt;/span&gt;
            &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #003388&#34;&gt;NULL&lt;/span&gt;;
    }
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;while&lt;/span&gt; (secondRunner)
    {
        secondRunner = secondRunner-&amp;gt;next;
        node = node-&amp;gt;next;
    }
    &lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt; node;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/abhi1010/43e289a9877fb9293680&#34;&gt;https://gist.github.com/abhi1010/43e289a9877fb9293680&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual the code is available &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Removing Duplicates from Linked List</title>
      <link>http://abhi1010.github.io/post/removing-duplicates-from-linked-list/</link>
      <pubDate>Sat, 07 Jun 2014 16:50:12 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/removing-duplicates-from-linked-list/</guid>
      <description>

&lt;p&gt;Duplicates can be removed in many ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a new Linked List containing only unique items&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Iterate through the Linked List and keep removing items that are being repeated&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The internal structure itself for the algo can either be map or set based. When using map the Node itself can be saved thereby making your life easier if you are creating a new Linked List. However sets can be very useful if we are just iterating through the Linked List and simply deleting items that are being repetetive. This is also a great spacesaver. Hence we decided to go down this path.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;code:33d170712a3b1643edfc33b9f231740c&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;As usual the &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;code&lt;/a&gt; is available here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a small sample as to how to do it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/abhi1010/e2b7117c20d0f591896f&#34;&gt;https://gist.github.com/abhi1010/e2b7117c20d0f591896f&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deleting a Node from Singly Linked List</title>
      <link>http://abhi1010.github.io/post/deleting-a-node-from-singly-linked-list/</link>
      <pubDate>Sat, 07 Jun 2014 10:49:17 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/deleting-a-node-from-singly-linked-list/</guid>
      <description>

&lt;p&gt;Deleting a Node from Singly Linked List is rather straight forward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You have to know the head first of all&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start by checking the head if that&amp;rsquo;s the one you are looking for&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keep moving forward and checking - always check for null pointers everywhere&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we talk about the code, let&amp;rsquo;s see how Linked List is setup.
&amp;lt;!&amp;ndash; more &amp;ndash;&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/abhi1010/33be440bf1012773b7e1&#34;&gt;https://gist.github.com/abhi1010/33be440bf1012773b7e1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, below is the code for it&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/abhi1010/bf9dbb193b4ff84ba3af&#34;&gt;https://gist.github.com/abhi1010/bf9dbb193b4ff84ba3af&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;code:ca5ee7b35fae15e9d7ea6b34351195c6&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;As usual the code is available &lt;a href=&#34;https://github.com/abhi1010/Algorithms/blob/master/Algo_codes/Node.cpp&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Usage of typename</title>
      <link>http://abhi1010.github.io/post/usage-of-typename/</link>
      <pubDate>Mon, 26 May 2014 14:19:15 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/usage-of-typename/</guid>
      <description>&lt;p&gt;What is wrong with the following code?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/anonymous/f1f2246d04a935794e44&#34;&gt;https://gist.github.com/anonymous/f1f2246d04a935794e44&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The issue is very simple but hard to notice. If you try to compile this, you will get the following errors:&lt;/p&gt;

&lt;blockquote&gt;main.cpp:24:5: error: need &#39;typename&#39; before &#39;OuterStruct&lt;T2&gt;::InnerStruct&#39; because &#39;OuterStruct&lt;T2&gt;&#39; is a dependent scope
OuterStruct&lt;T2&gt;::InnerStruct mUsingInner;
^
main.cpp: In function &#39;int main(int, char**)&#39;:
main.cpp:34:13: error: &#39;struct InnerStruct_Wrapper&lt;int&gt;&#39; has no member named &#39;mUsingInner&#39;
wrapper.mUsingInner = innerStrct;
^&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;The Issue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At least it straight away tells you something is wrong with &lt;code&gt;InnerStruct_Wrapper&lt;/code&gt;. Here&amp;rsquo;s what is happening:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The compiler does not know that mUsingInner in that line is actually a variable of type &amp;ldquo;OuterStruct&lt;T2&gt;::InnerStruct&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;InnerStruct will only be known later when it is being instantiated&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compiler cannot figure out what InnerStruct means here. It could be a type or a member variable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The only way here is to help the compiler by telling it beforehand that is going to be a class or struct type. The way to tell the compiler that something like this is supposed to be a type name is to throw in the keyword &amp;ldquo;typename&amp;rdquo;. The &amp;ldquo;typename&amp;rdquo; keyword has to be used everytime you want to tell the compiler that it should expect a Type in its place.&lt;/p&gt;

&lt;p&gt;One place where this is used quite a lot is when templates have to implement iterators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The full sample code, along with the fix&lt;/em&gt;&lt;/strong&gt; is provided on &lt;a href=&#34;http://coliru.stacked-crooked.com/a/b0ab70c458370048&#34;&gt;Stacked-Crooked&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up your VIM... Your Style</title>
      <link>http://abhi1010.github.io/post/setting-up-your-vim-your-style/</link>
      <pubDate>Mon, 19 May 2014 15:51:51 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/setting-up-your-vim-your-style/</guid>
      <description>&lt;p&gt;Writing code using VIM can be a bit overwhelming but it helps creating a few shortcuts there to make your life easier. Here I will discuss a few.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, it is always a good idea to set up your tabs and spaces&lt;/li&gt;
&lt;li&gt;Set up a shortcut to:&lt;/li&gt;
&lt;li&gt;* Toggling of Auto-Indent while pasting source text; very useful in code (F2 in my provided script)

&lt;ul&gt;
&lt;li&gt;Toggling of Auto-Scroll of Split windows (F3 in my provided script)&lt;/li&gt;
&lt;li&gt;Macro for Folding functions within the source code (@q in my provided script)&lt;/li&gt;
&lt;li&gt;Smart case search - based on whether the input is in caps or not&lt;/li&gt;
&lt;li&gt;Toggling of Mouse Usage in VIM window - to allow quick selection of text (F12 in my provided script)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see the provided script below to have a look.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/abhi1010/6f190c9f3afd42881ef5&#34;&gt;https://gist.github.com/abhi1010/6f190c9f3afd42881ef5&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting a group of lines from a file</title>
      <link>http://abhi1010.github.io/post/getting-a-group-of-lines-from-a-file/</link>
      <pubDate>Mon, 19 May 2014 09:45:57 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/getting-a-group-of-lines-from-a-file/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve had this need quite a few times to pull out a section of logs that would begin with a particular line and end with another. grep is not exactly useful there because it only prints out sections based on line counters (using -A/B/C) lines based on a single search pattern.&lt;/p&gt;

&lt;p&gt;I came up with a script that can run at almost same speeds using &lt;code&gt;grep/cat/awk&lt;/code&gt;. &lt;code&gt;awk&lt;/code&gt; is used to decide whether the end of the section has been reached or not. Some features of the script are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Since &lt;code&gt;awk&lt;/code&gt; script only toggles one variable it works seamlessly without delaying the actual work&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Works on gzip files as well&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you do not want to depend on grep or are unsure how many lines may be between begin and end keyword then replace gunzip with zcat and grep with cat.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Usage: &lt;code&gt;group filename printBeginKeyword printUntilKeyword NumOfLines&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at the script&amp;hellip;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/abhi1010/924a5f12f3067ba0b3af&#34;&gt;https://gist.github.com/abhi1010/924a5f12f3067ba0b3af&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>32 bit vs 64 bit</title>
      <link>http://abhi1010.github.io/post/32-bit-vs-64-bit/</link>
      <pubDate>Tue, 15 Apr 2014 02:40:00 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/32-bit-vs-64-bit/</guid>
      <description>

&lt;h3 id=&#34;when-to-use-64-bit:781115a00a27c6c773035866d9644c43&#34;&gt;When to use 64-bit?&lt;/h3&gt;

&lt;p&gt;If your application needs more than 2-4gb of data&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your application intensively uses 64-bit arithmetic&lt;/li&gt;
&lt;li&gt;* 32-bit x86 compiled applications are restricted to x86 instruction set, even when run on on a 64-bit machine&lt;/li&gt;
&lt;li&gt;x64 supports 16 registers compared to just 8 in x86. If your code is computation intensive this may help a great deal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;when-to-use-32-bit:781115a00a27c6c773035866d9644c43&#34;&gt;When to use 32-bit?&lt;/h3&gt;

&lt;p&gt;After reading so many great things about 32 bit, why would anybody still want to code against 32-bit? Simple reason - code compiled in 32-bit takes lesser memory. For example, a pointer in 64-bit machine is 8 bytes compared to 4 bytes with 32-bit. Now imagine how many pointers do you have going around in your code?&lt;/p&gt;

&lt;h3 id=&#34;when-to-not-use-64-bit:781115a00a27c6c773035866d9644c43&#34;&gt;When to not use 64-bit?&lt;/h3&gt;

&lt;p&gt;Sometimes if your code is running on a machine that does not have too much of space then it is a never a great idea to use 64-bit compilation because the same task can probably be done much better using 32-bit version. L2 and L3 caches will be utilized a lot more in 64-bit code (and a lot earlier as well) compared to 32-bit; on such systems.&lt;/p&gt;

&lt;h3 id=&#34;summary:781115a00a27c6c773035866d9644c43&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Always benchmark your code and ensure that the application actually needs more than 2-4Gb of space.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tokenize a String using C&#43;&#43;</title>
      <link>http://abhi1010.github.io/post/tokenize-a-string-using-c11/</link>
      <pubDate>Tue, 08 Apr 2014 07:00:00 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/tokenize-a-string-using-c11/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a short snippet to split a string into multiple tokens; into a vector. As you will see that, if you run the code, boost version performs better because you can choose a number of delimiters to split your string instead of the vanilla version using the normal C++ code. Of course, you may also write your own code to do something like this but I was looking to do some short snippets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/anonymous/0465925390f3442a7691&#34;&gt;https://gist.github.com/anonymous/0465925390f3442a7691&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have &lt;strong&gt;posted my code on &lt;a href=&#34;http://coliru.stacked-crooked.com/a/01e1c68ffd0199cd&#34;&gt;Stacked-Crooked&lt;/a&gt;&lt;/strong&gt; which you can view along with the output as well. It shows C++ doesn&amp;rsquo;t perform so well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heap Sort vs Merge Sort vs Insertion Sort vs Radix Sort vs Counting Sort vs Quick Sort</title>
      <link>http://abhi1010.github.io/post/heap-sort-vs-merge-sort-vs-insertion-sort-vs-radix-sort-vs-counting-sort-vs-quick-sort/</link>
      <pubDate>Wed, 19 Mar 2014 05:42:00 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/heap-sort-vs-merge-sort-vs-insertion-sort-vs-radix-sort-vs-counting-sort-vs-quick-sort/</guid>
      <description>

&lt;p&gt;I had written about sorting algorithms (Tag: &lt;a href=&#34;http://codersdigest.wordpress.com/tag/sorting/&#34;&gt;Sorting&lt;/a&gt;) with details about what to look out for along with their code snippets but I wanted a do a quick comparison of all the algos together to see how do they perform when the same set of input is provided to them. Hence I started working on a simple implementation for each one of them. I have now put together all of them in a single project on GitHub. I ensured that they all have the same set of procedures during their run. Some of the items I wanted to ensure was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Same input array&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Same number of iterations. Each iteration having the same input&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Each algo being timed the exact same way as another&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the algorithms being tested were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codersdigest.wordpress.com/2012/10/06/merge-sort/&#34;&gt;Heap Sort&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codersdigest.wordpress.com/2012/10/06/merge-sort/&#34;&gt;Merge Sort&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codersdigest.wordpress.com/2012/09/18/insertion-sort/&#34;&gt;Insertion Sort&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codersdigest.wordpress.com/2012/09/13/radix-sort/&#34;&gt;Radix Sort&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codersdigest.wordpress.com/2012/09/11/counting-sort/&#34;&gt;Counting Sort&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://codersdigest.wordpress.com/2012/09/22/quick-sort/&#34;&gt;Quick Sort&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-did-we-ensure-equality:6e1f05c125f850e9eb36735baf7184b1&#34;&gt;How did we ensure Equality?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Created a simple base class for all algorithms: &lt;code&gt;AlgoStopwatch&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Responsible for benchmarking everything&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Provide a function called &lt;code&gt;doSort()&lt;/code&gt; that would allow derived classes to implement their algorithm&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ensures that every algorithm has a name and description - to help us distinguish&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Another class to help manage the testing of all the algorithms: &lt;code&gt;AlgoDemo&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All instances are created here for the algorithms&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The input array is provided by this class to all algorithms&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;code:6e1f05c125f850e9eb36735baf7184b1&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;As usual the code for the project is available here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/abhi1010/Algorithms&#34;&gt;https://github.com/abhi1010/Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It can be run using Visual Studio without any changes.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;numbers:6e1f05c125f850e9eb36735baf7184b1&#34;&gt;Numbers&lt;/h2&gt;

&lt;p&gt;Looking at the numbers below, it may be hard to compare the actual values. Hence I decided to &lt;code&gt;normalize&lt;/code&gt; them by calculating how much time will be required to sort &lt;code&gt;100 numbers&lt;/code&gt; using the same rate as the actual numbers. They are provided for all algorithms on the right-most column.
&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;&lt;/p&gt;

&lt;p&gt;&lt;td style=&#34;width:25%;&#34; &gt;&lt;/p&gt;

&lt;h3 id=&#34;merge-sort-http-codersdigest-wordpress-com-2012-10-06-merge-sort:6e1f05c125f850e9eb36735baf7184b1&#34;&gt;&lt;a href=&#34;http://codersdigest.wordpress.com/2012/10/06/merge-sort/&#34;&gt;Merge Sort&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td style=&#34;width:25%;&#34; &gt;&lt;strong&gt;# of Items in Array&lt;/strong&gt;
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td style=&#34;width:25%;&#34; &gt;&lt;strong&gt;Time Taken&lt;/strong&gt;
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td style=&#34;width:25%;&#34; &gt;&lt;strong&gt;Average for 100 numbers&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;&lt;/p&gt;

&lt;p&gt;&lt;td rowspan=&#34;3&#34; &gt;&lt;strong&gt;Random&lt;/strong&gt;
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;10
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.047464
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.47464
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;1K
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;5.41906
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.541906
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;1M
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;8444.11
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.844411
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;&lt;/p&gt;

&lt;p&gt;&lt;td rowspan=&#34;3&#34; &gt;&lt;strong&gt;Sorted&lt;/strong&gt;
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;10
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.027155
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.27155
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;1K
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;4.47016
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.447016
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;1M
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;6323.05
&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;td &gt;0.632305
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### Merge Sort 2



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Array**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.033668
&lt;/td&gt;

&lt;td &gt;0.33668
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;3.89374
&lt;/td&gt;

&lt;td &gt;0.389374
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;7076.04
&lt;/td&gt;

&lt;td &gt;0.707604
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.019034
&lt;/td&gt;

&lt;td &gt;0.19034
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;2.7833
&lt;/td&gt;

&lt;td &gt;0.27833
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;4664.16
&lt;/td&gt;

&lt;td &gt;0.466416
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### [Insertion Sort](http://codersdigest.wordpress.com/2012/09/18/insertion-sort/)



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Array**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.006095
&lt;/td&gt;

&lt;td &gt;0.06095
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;0.369859
&lt;/td&gt;

&lt;td &gt;0.0369859
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;323.878
&lt;/td&gt;

&lt;td &gt;0.0323878
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.005022
&lt;/td&gt;

&lt;td &gt;0.05022
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;0.11696
&lt;/td&gt;

&lt;td &gt;0.011696
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;122.427
&lt;/td&gt;

&lt;td &gt;0.0122427
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### [Heap Sort 1](http://codersdigest.wordpress.com/2012/10/17/heap-sort/)



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Array**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.013543
&lt;/td&gt;

&lt;td &gt;0.13543
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;3.22043
&lt;/td&gt;

&lt;td &gt;0.322043
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;4770.14
&lt;/td&gt;

&lt;td &gt;0.477014
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.007507
&lt;/td&gt;

&lt;td &gt;0.07507
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;0.625425
&lt;/td&gt;

&lt;td &gt;0.0625425
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;633.142
&lt;/td&gt;

&lt;td &gt;0.0633142
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### [Heap Sort 2](http://codersdigest.wordpress.com/2012/10/17/heap-sort/)



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Array**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.019352
&lt;/td&gt;

&lt;td &gt;0.19352
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;3.86284
&lt;/td&gt;

&lt;td &gt;0.386284
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;8914.22
&lt;/td&gt;

&lt;td &gt;0.891422
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.011289
&lt;/td&gt;

&lt;td &gt;0.11289
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;3.49712
&lt;/td&gt;

&lt;td &gt;0.349712
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;6661.45
&lt;/td&gt;

&lt;td &gt;0.666145
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;margin-left:0;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### [Heap Sort 3](http://codersdigest.wordpress.com/2012/10/17/heap-sort/)



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Arraytrong&gt;**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.016266
&lt;/td&gt;

&lt;td &gt;0.16266
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;0.968032
&lt;/td&gt;

&lt;td &gt;0.0968032
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;900.004
&lt;/td&gt;

&lt;td &gt;0.0900004
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.012845
&lt;/td&gt;

&lt;td &gt;0.12845
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;3.08637
&lt;/td&gt;

&lt;td &gt;0.308637
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;3839.23
&lt;/td&gt;

&lt;td &gt;0.383923
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### [QuickSort](http://codersdigest.wordpress.com/2012/09/22/quick-sort/)



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Array**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.072972
&lt;/td&gt;

&lt;td &gt;0.72972
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;2.74698
&lt;/td&gt;

&lt;td &gt;0.274698
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;4640.77
&lt;/td&gt;

&lt;td &gt;0.464077
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.042773
&lt;/td&gt;

&lt;td &gt;0.42773
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;1.84335
&lt;/td&gt;

&lt;td &gt;0.184335
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;2473.42
&lt;/td&gt;

&lt;td &gt;0.247342
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### [Counting Sort](http://codersdigest.wordpress.com/2012/09/11/counting-sort/)



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Array**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.022982
&lt;/td&gt;

&lt;td &gt;0.22982
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;background-color:#efefef;color:#008000;&#34; &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;1.21822
&lt;/td&gt;

&lt;td &gt;0.121822
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;1823.85
&lt;/td&gt;

&lt;td &gt;0.182385
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.026815
&lt;/td&gt;

&lt;td &gt;0.26815
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;background-color:#efefef;color:#008000;&#34; &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;1.19146
&lt;/td&gt;

&lt;td &gt;0.119146
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;1612.58
&lt;/td&gt;

&lt;td &gt;0.161258
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table style=&#34;text-align:center;background-color:#efefef;width:100%;border-collapse:collapse;border:lightblue solid;&#34; border=&#34;1&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td style=&#34;width:25%;&#34; &gt;


### [Radix Sort](http://codersdigest.wordpress.com/2012/09/13/radix-sort/)



&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**# of Items in Array**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Time Taken**
&lt;/td&gt;

&lt;td style=&#34;width:25%;&#34; &gt;**Average for 100 numbers**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Random**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.033351
&lt;/td&gt;

&lt;td &gt;0.33351
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;background-color:#efefef;color:#008000;&#34; &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;3.22004
&lt;/td&gt;

&lt;td &gt;0.322004
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;5650.9
&lt;/td&gt;

&lt;td &gt;0.56509
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td rowspan=&#34;3&#34; &gt;**Sorted**
&lt;/td&gt;

&lt;td &gt;10
&lt;/td&gt;

&lt;td &gt;0.020659
&lt;/td&gt;

&lt;td &gt;0.20659
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1K
&lt;/td&gt;

&lt;td &gt;3.26273
&lt;/td&gt;

&lt;td &gt;0.326273
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td &gt;1M
&lt;/td&gt;

&lt;td &gt;5683.91
&lt;/td&gt;

&lt;td &gt;0.568391
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Global Search in VIM</title>
      <link>http://abhi1010.github.io/post/global-search/</link>
      <pubDate>Tue, 11 Feb 2014 14:56:00 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/global-search/</guid>
      <description>&lt;p&gt;You must be knowing about regular VIM search&lt;/p&gt;

&lt;blockquote&gt;%s/SEARCH/REPLACE/CMD
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;However, sometimes you do not want to replace something but just see all instances of the a word or phrase. In such cases, global search is really useful when on vim. The syntax is simpler than normal search-replace:&lt;/p&gt;

&lt;blockquote&gt;:[range]g[lobal]/{pattern}/[cmd]
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;This will show all instances of the &amp;ldquo;SEARCH&amp;rdquo; term within the VIM window. There&amp;rsquo;s another version of the same command which is as follows:&lt;/p&gt;

&lt;blockquote&gt;:[range]g[lobal]!/{pattern}/[cmd]
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;This is similar to the previous command but the only difference is that this command contains &amp;ldquo;!&amp;rdquo; which signifies that the command will be executed on all lines &lt;code&gt;NOT&lt;/code&gt; matching the &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One example here would be to delete all lines in a file containing a particular word:&lt;/p&gt;

&lt;blockquote&gt;:g/deleteMe/d
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;There could be lot more actions (regular vim stuff) that you could do like yanking or indenting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ideas for Shared Memory in Linux</title>
      <link>http://abhi1010.github.io/post/ideas-for-shared-memory-in-linux/</link>
      <pubDate>Sun, 13 Oct 2013 05:59:22 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/ideas-for-shared-memory-in-linux/</guid>
      <description>&lt;p&gt;I have been doing extensive research today regarding shared memory in linux before I embark on a new project in which shaving time off process communication latency is extremely important. I found some very interesting links as well. Let’s break them down:&lt;/p&gt;

&lt;table style=&#34;border:thin solid lightblue;&#34; &gt;
&lt;tbody &gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;**Topic**
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;**Description**
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;**Link**
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;Theory/Explanation
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Some articles that explain how to get started
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[open-std](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2044.html)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;IPC Mechanisms – some recommendations. Mainly talks about softwares like Boost, dBus

dBus used to work using kernel levels but lately have come up with a patch that bypasses kernels
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/1906166/inter-process-communication-recommendation)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;What every programmer should know about memory
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[LWN](http://lwn.net/Articles/255364/)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Linux IPC
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[TLDP](http://www.tldp.org/LDP/tlk/ipc/ipc.html)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Cache Friendly Code
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/16699247/what-is-cache-friendly-code/16699282#16699282)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;Helpful Articles
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Which linux IPC technique to use?
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/2281204/which-linux-ipc-technique-to-use)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Inter process communication – talks about shared memory
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[ALP](http://www.advancedlinuxprogramming.com/alp-folder/alp-ch05-ipc.pdf)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Linux Poll Events on Shared Memory
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/11470322/cause-a-linux-poll-event-on-a-shared-memory-file)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Using semaphores in Shared Memory
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/10772860/semaphores-and-shared-memory-in-linux)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Sharing semaphores between Shared Memory
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/8359322/how-to-share-semaphores-between-processes-using-shared-memory?rq=1)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Sharing memory between processes
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/11583281/sharing-memory-between-two-processes)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;Reserving memory at kernel boot up (DMA)
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[Stackoverflow](http://stackoverflow.com/questions/647783/direct-memory-access-in-linux?rq=1)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr &gt;

&lt;td width=&#34;133&#34; &gt;Extra
&lt;/td&gt;

&lt;td width=&#34;354&#34; &gt;IPC Shared memory samples
&lt;/td&gt;

&lt;td width=&#34;151&#34; &gt;[linuxgazette](http://linuxgazette.net/104/ramankutty.html)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>CVS Cheat Sheet</title>
      <link>http://abhi1010.github.io/post/cvs-cheat-sheet/</link>
      <pubDate>Wed, 03 Jul 2013 07:28:00 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/cvs-cheat-sheet/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve worked on CVS for a long time now and figured out that I&amp;rsquo;d save a lot of time if I started writing alias or functions for the numerous tasks that I did on them. I will put down some of them here so you may benefit from them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Silently update and inform about the status of the files (recursive)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;cvs -q -n update
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Same as earlier but will only do so for the current folder&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;cvs -Q -n update -l
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Finds out the cv[s] [m]odified list of files while also indentating them nicely with only the important data pulled out&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;cvs -Q status | egrep &#34;File: &#34; -A 4 | egrep -v &#34;Up-to-date&#34; | egrep &#34;File: &#34; -A 3 | sed -e &#34;s/ Status:/\t\tStatus:/&#34; -e &#34;s/,v$/\n-------------------------------------------------------------------------\n/&#34; -e &#34;s/.*${PWD##*/}\//Location:\t\t /&#34; -e &#34;s/Attic\///&#34; | egrep &#34;Location:|Repository|Status:|File:|--------
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Recursively add all files to CVS for committing from the current directory&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;find . -type d -print | grep -v CVS | xargs cvs add
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Doing a side by side diff (change the value of -W according to the width of the screen)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;cvs -Q diff -t -y --suppress-common-lines -W 190 $*
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Merging code from one branch to another&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;# Creates a command that you can use to &#34;merge&#34; your code from dev head to this current branch.   
# Ideally you want to run this command from a folder where you want the code to merge to....   
merge()   
{   
BRANCH=$(cat CVS/Tag | cut -c2-)   
CMD=$(echo cvs update -j $BRANCH -j Version_2_17_dev .)   
echo $CMD   
}   

&gt; 
&gt; &lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Cursor Control in VIM Search</title>
      <link>http://abhi1010.github.io/post/cursor-control-in-vim-search/</link>
      <pubDate>Tue, 11 Jun 2013 07:05:00 +0000</pubDate>
      
      <guid>http://abhi1010.github.io/post/cursor-control-in-vim-search/</guid>
      <description>&lt;p&gt;Found a great way to search for keywords &amp;amp;&amp;amp; control the location of cursor in vim. It is excellent if you want to do a particular task multiple times. Usually if you search the cursor will straight away take you to the start of search. What if you want to go to the end of the word you are searching for?&lt;/p&gt;

&lt;blockquote&gt;  
&gt; 
&gt; /pattern/e
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;This takes you to the END of the keyword you are looking for.&lt;/p&gt;

&lt;p&gt;That’s not all. What if you want to go the second letter in that keyword? Change the pattern to as follows:&lt;/p&gt;

&lt;blockquote&gt;  
&gt; 
&gt; /pattern/s+1
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;That’s great. But what if I want to go to the end of the keyword?&lt;/p&gt;

&lt;blockquote&gt;  
&gt; 
&gt; /pattern/e
&gt; 
&gt; &lt;/blockquote&gt;

&lt;p&gt;Awesome. Let’s review it through examples. Let’s say our phrase is “the brown fox jumped over the lazy dog” and we originally want to search for “brown”.&lt;/p&gt;

&lt;p&gt;&lt;table cellpadding=&#34;2&#34; cellspacing=&#34;0&#34; border=&#34;1&#34; width=&#34;947&#34; &gt;&lt;tbody &gt;     &lt;tr &gt;&lt;br /&gt;
&lt;td width=&#34;185&#34; valign=&#34;top&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PATTERN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;286&#34; valign=&#34;top&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CURSOR LOCATED AT BEGINNING OF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;474&#34; valign=&#34;top&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DESCRIPTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr &gt;&lt;br /&gt;
&lt;td width=&#34;185&#34; valign=&#34;top&#34; &gt;/brown
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;286&#34; valign=&#34;top&#34; &gt;brown fox….
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;474&#34; valign=&#34;top&#34; &gt;search and start at “brown”
&lt;/td&gt;     &lt;/tr&gt;      &lt;tr &gt;&lt;br /&gt;
&lt;td width=&#34;185&#34; valign=&#34;top&#34; &gt;/brown/s+2
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;286&#34; valign=&#34;top&#34; &gt;own fox…
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;474&#34; valign=&#34;top&#34; &gt;start at “brown” but move 2 letters from ‘start’
&lt;/td&gt;     &lt;/tr&gt;      &lt;tr &gt;&lt;br /&gt;
&lt;td width=&#34;185&#34; valign=&#34;top&#34; &gt;/brown/s-4
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;286&#34; valign=&#34;top&#34; &gt;the brown fox…
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;474&#34; valign=&#34;top&#34; &gt;start at “brown” but move 4 letters to the left from ‘start’
&lt;/td&gt;     &lt;/tr&gt;      &lt;tr &gt;&lt;br /&gt;
&lt;td width=&#34;185&#34; valign=&#34;top&#34; &gt;/brown/e
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;286&#34; valign=&#34;top&#34; &gt;n fox….
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;474&#34; valign=&#34;top&#34; &gt;search for “brown” but move to the end
&lt;/td&gt;     &lt;/tr&gt;      &lt;tr &gt;&lt;br /&gt;
&lt;td width=&#34;185&#34; valign=&#34;top&#34; &gt;/brown/e+2
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;286&#34; valign=&#34;top&#34; &gt;fox…
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;474&#34; valign=&#34;top&#34; &gt;search for “brown” but move 2 letters from the ‘end’
&lt;/td&gt;     &lt;/tr&gt;      &lt;tr &gt;&lt;br /&gt;
&lt;td width=&#34;185&#34; valign=&#34;top&#34; &gt;/brown/e-1
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;286&#34; valign=&#34;top&#34; &gt;wn fox…
&lt;/td&gt;&lt;br /&gt;
&lt;td width=&#34;474&#34; valign=&#34;top&#34; &gt;search for “brown” but move 1 letter to the left from the ‘end’
&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>